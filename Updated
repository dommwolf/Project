cd ~/Edispar_SINE_project_2

# 1) Turn each GFF into a two‐column table of geneID→fullLine
#    (for histo and dispar separately)

awk -F'\t' '$3=="gene" {
  # extract the ID=... attribute
  if(match($9,/ID=([^;]+)/,m)) {
    gene = m[1]
    print gene "\t" $0
  }
}' 00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.fixed2.sorted.gff3 \
  > histo_gene_map.tsv

awk -F'\t' '$3=="gene" {
  if(match($9,/ID=([^;]+)/,m)) {
    gene = m[1]
    print gene "\t" $0
  }
}' 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed2.gff.sorted.gff3 \
  > dispar_gene_map.tsv

# 2) Now join against your candidate lists:

# Histolytica candidates (field 1 of histo_yes_dispar_no.tsv)
join -t $'\t' -1 1 -2 1 \
  <(sort histo_yes_dispar_no.tsv) \
  <(sort -k1,1 histo_gene_map.tsv) \
  | cut -f2- > histo_asym_candidates.gff3

# Dispar candidates (field 2 of dispar_yes_histo_no.tsv)
# First extract column 2, then join:
cut -f2 dispar_yes_histo_no.tsv | sort > dispar_ids.txt

join -t $'\t' -1 1 -2 1 dispar_ids.txt <(sort -k1,1 dispar_gene_map.tsv) \
  | cut -f2- > dispar_asym_candidates.gff3

# 3) Clean up intermediates
rm histo_gene_map.tsv dispar_gene_map.tsv dispar_ids.txt

# 4) Sanity check
echo "Histo candidates:"
wc -l histo_asym_candidates.gff3
head -n5 histo_asym_candidates.gff3
#!/usr/bin/env bash
set -euo pipefail

cd ~/Edispar_SINE_project_2

# ─── GFF FILE LOCATIONS ───────────────────────────────────────────
# point at the FULL-feature fixed2 files (not the empty “sorted” stubs)
HISTO_GFF=00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.fixed2.gff3
DISPAR_GFF=00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed2.gff
# ──────────────────────────────────────────────────────────────────

# =============================================================================
# 0. Initialise workspace & copy inputs
# =============================================================================
mkdir -p \
  00_inputs/{histolytica,dispar} \
  01_feature_tables/{histolytica,dispar} \
  02_repeatmasker/{histolytica,dispar} \
  03_SINE1_extraction/{histolytica,dispar} \
  04_MSA_HMM/{histolytica,dispar} \
  05_nhmmer/{histolytica,dispar} \
  06_RNAseq_align/{histolytica,dispar,index} \
  07_StringTie/{histolytica,dispar}/{A_genes_only,B_genes_plus_SINEs,C_abinitio} \
  08_SINE1_union/{histolytica,dispar} \
  09_SINE1_downstream/{histolytica,dispar}

# Copy reference genomes
rm -f 00_inputs/histolytica/GCA_000208925.2_JCVI_ESG2_1.0_genomic.fna \
      00_inputs/dispar/GCA_000209125.2_JCVI_EDISG_1.0_genomic.fna
cp /project/data/.../histolytica/*.fna 00_inputs/histolytica/
cp /project/data/.../dispar/*.fna 00_inputs/dispar/

# Copy RNA-seq FASTQs
cp /project/data/.../histolytica_reads/*.fastq 00_inputs/histolytica/
cp /project/data/.../dispar_reads/*.fastq      00_inputs/dispar/

# Copy annotations & SINE lists
cp /project/data/.../Entamoeba_histolytica.JCVI-ESG2-1.0.60.gff3 \
   /project/data/.../histolytica_feature_tables.txt \
   /project/data/.../EhSINE1_Full_List.txt \
   00_inputs/histolytica/

cp /project/data/.../AmoebaDB-59_EdisparSAW760.gff \
   /project/data/.../dispar_feature_tables.txt \
   /project/data/.../EdSINE1_Full_List.txt \
   00_inputs/dispar/

# Build HISAT2 indices
module load hisat2/2.2.1 samtools/1.6
hisat2-build -p 8 \
  00_inputs/histolytica/GCA_000208925.2_JCVI_ESG2_1.0_genomic.fna \
  06_RNAseq_align/index/histo
hisat2-build -p 8 \
  00_inputs/dispar/GCA_000209125.2_JCVI_EDISG_1.0_genomic.fna \
  06_RNAseq_align/index/dispar
cd ~/Edispar_SINE_project_2

#!/usr/bin/env bash
cd ~/Edispar_SINE_project_2

# ─────────────────────────────────────────────────────────────────────────────
# 1a) Fix E. dispar GFF chromosome names → “.fixed.gff”
# ─────────────────────────────────────────────────────────────────────────────
awk 'BEGIN{OFS="\t"}
  /^##sequence-region/     { $2=$2".1" }
  !/^#/ && $1~/^DS[0-9]+\.[0-9]+$/ { $1=$1".1" }
  { print }
' 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.gff \
  > 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed.gff

# ─────────────────────────────────────────────────────────────────────────────
# 1b) Sort both GFFs into the “.fixed2.sorted.gff3” names
# ─────────────────────────────────────────────────────────────────────────────
sort -k1,1 -k4,4n \
  00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.gff3 \
  > 00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.fixed2.sorted.gff3

sort -k1,1 -k4,4n \
  00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed.gff \
  > 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed2.gff

# ──────────────────────────────────────────────────────────────────────────────
#  2. RNA-seq alignment → sorted & indexed BAMs
# ──────────────────────────────────────────────────────────────────────────────

module load hisat2/2.2.1   # or your site’s Hisat2 version
module load samtools/1.6   # or Samtools version

map_and_sort() {
  species=$1
  sample=$2

  if [ "$species" = "histolytica" ]; then
    idxdir="06_RNAseq_align/index/histo"
  else
    idxdir="06_RNAseq_align/index/dispar"
  fi

  indir="00_inputs/${species}"
  outdir="06_RNAseq_align/${species}"
  fastq="${indir}/${sample}.fastq"
  sam="${outdir}/${sample}.sam"
  bam="${outdir}/${sample}.bam"
  tmpdir="${outdir}/tmp"

  mkdir -p "$outdir" "$tmpdir"

  echo "=== Mapping ${species} ${sample} ==="
  hisat2 -p 8 -x "$idxdir" -U "$fastq" -S "$sam"

  echo "=== Sorting ${species} ${sample} ==="
  samtools sort -T "${tmpdir}/${sample}_tmp" -@4 -o "$bam" "$sam"

  echo "=== Indexing ${species} ${sample} ==="
  samtools index "$bam"

  rm -f "$sam"
}

# List of SRR samples for each species
histo_samples=( SRR16971191 SRR16971202 SRR16971203 )
dispar_samples=( SRR16971190 SRR16971199 SRR16971200 )

for s in "${histo_samples[@]}"; do
  map_and_sort histolytica "$s"
done

for s in "${dispar_samples[@]}"; do
  map_and_sort dispar "$s"
done

echo "✓  Step 2 complete — all BAMs sorted and indexed"



module load RepeatMasker/4.1.2   # or whatever your cluster’s version is

# =============================================================================
#  3a. Extract “fixed” SINE1 loci from the hand-curated feature tables
# =============================================================================
mkdir -p 01_feature_tables/histolytica 01_feature_tables/dispar

# Histolytica
grep -B1 -i "rpt_family.*SINE1" \
    00_inputs/histolytica/histolytica_feature_tables.txt \
  | awk 'BEGIN{OFS="\t"; i=0}
         /repeat_region/ {
           chr   = $1
           start = $2 - 1; if(start<0) start=0
           end   = $3
           name  = "SINE1_" ++i
           print chr, start, end, name, ".", "+"
         }' \
  > 01_feature_tables/histolytica/SINE1_fixed.bed
echo "→ histolytica: $(wc -l < 01_feature_tables/histolytica/SINE1_fixed.bed) loci"

# Dispar
grep -B1 -i "rpt_family.*EdSINE1" \
    00_inputs/dispar/dispar_feature_tables.txt \
  | awk 'BEGIN{OFS="\t"; j=0}
         /repeat_region/ {
           chr   = $1
           start = $2 - 1; if(start<0) start=0
           end   = $3
           name  = "EdSINE1_" ++j
           print chr, start, end, name, ".", "+"
         }' \
  > 01_feature_tables/dispar/EdSINE1_fixed.bed
echo "→ dispar:    $(wc -l < 01_feature_tables/dispar/EdSINE1_fixed.bed) loci"


# =============================================================================
#  3b. Run RepeatMasker on each genome (if you haven’t already)
# =============================================================================
mkdir -p 02_repeatmasker/histolytica 02_repeatmasker/dispar

# Histolytica
echo "=== RepeatMasker: histolytica ==="
cd 00_inputs/histolytica
RepeatMasker -pa 4 -no_is -species entamoeba \
  GCA_000208925.2_JCVI_ESG2_1.0_genomic.fna
mv *.out *.tbl *.masked ../../02_repeatmasker/histolytica/
cd ../..

# Dispar
echo "=== RepeatMasker: dispar ==="
cd 00_inputs/dispar
RepeatMasker -pa 4 -no_is -species entamoeba \
  GCA_000209125.2_JCVI_EDISG_1.0_genomic.fna
mv *.out *.tbl *.masked ../../02_repeatmasker/dispar/
cd ../..

echo "✓  Step 3 complete"

# =============================================================================
# 4a. Convert RepeatMasker .out → BED
# =============================================================================
for spp in histolytica dispar; do
  RM_OUT=02_repeatmasker/$spp/$(ls 02_repeatmasker/$spp/*.out)
  RM_BED=02_repeatmasker/$spp/RM.bed

  echo "=== $spp: converting RepeatMasker .out → BED ==="
  awk 'BEGIN{OFS="\t"}
       NR>3 && $1!="" {
         chr    = $5
         start  = $6 - 1      # BED is 0-based
         end    = $7
         name   = $10         # repeat name
         strand = ($9=="C") ? "-" : "+"
         print chr, start, end, name, ".", strand
       }' "$RM_OUT" > "$RM_BED"

  echo "  → $spp: $(wc -l <"$RM_BED") total intervals in $RM_BED"
done

# =============================================================================
# 4b. Extract only SINE1/EdSINE1 calls
# =============================================================================
for spp in histolytica dispar; do
  RM_BED=02_repeatmasker/$spp/RM.bed
  OUT_BED=02_repeatmasker/$spp/RM_SINE1.bed

  echo "=== $spp: filtering SINE1 calls ==="
  grep -w -e "SINE1" -e "EdSINE1" "$RM_BED" > "$OUT_BED"
  echo "  → $spp: $(wc -l <"$OUT_BED") SINE1 intervals written to $OUT_BED"
done
#!/usr/bin/env bash
set -euo pipefail
cd ~/Edispar_SINE_project_2

#STEP5

#!/usr/bin/env bash

cd ~/Edispar_SINE_project_2

# Load bedtools
module purge
module load bedtools/2.31.1

echo "=== Re-running FASTA extraction test (Step 5) ==="

# Ensure directories exist
mkdir -p 03_SINE1_extraction/histolytica 03_SINE1_extraction/dispar

# Histolytica
bedtools getfasta \
  -fi 00_inputs/histolytica/GCA_000208925.2_JCVI_ESG2_1.0_genomic.fna \
  -bed 01_feature_tables/histolytica/SINE1_fixed.bed \
  -fo 03_SINE1_extraction/histolytica/SINE1.fa
echo -n "Histo SINE1 count: "; grep -c '^>' 03_SINE1_extraction/histolytica/SINE1.fa

# Dispar
bedtools getfasta \
  -fi 00_inputs/dispar/GCA_000209125.2_JCVI_EDISG_1.0_genomic.fna \
  -bed 01_feature_tables/dispar/EdSINE1_fixed.bed \
  -fo 03_SINE1_extraction/dispar/SINE1.fa
echo -n "Dispar EdSINE1 count: "; grep -c '^>' 03_SINE1_extraction/dispar/SINE1.fa


#!/usr/bin/env bash
set -euo pipefail
cd ~/Edispar_SINE_project_2

# (Re)load alignment & HMM tools
module load clustal/1 hmmer/3.3.2

#!/usr/bin/env bash

cd ~/Edispar_SINE_project_2

# ─────────────────────────────────────────────────────────────────────────────
# Step 6a: Multiple Sequence Alignment with Clustal Omega
# ─────────────────────────────────────────────────────────────────────────────
module purge
module load clustal/1

echo "=== MSA for Histolytica SINE1 ==="
clustalo -i 03_SINE1_extraction/histolytica/SINE1.fa \
         -o 04_MSA_HMM/histolytica/SINE1.aln \
         --threads 8 --force

echo "=== MSA for Dispar EdSINE1 ==="
clustalo -i 03_SINE1_extraction/dispar/SINE1.fa \
         -o 04_MSA_HMM/dispar/SINE1.aln \
         --threads 8 --force

# ─────────────────────────────────────────────────────────────────────────────
# Step 6b: Build HMMs with HMMER
# ─────────────────────────────────────────────────────────────────────────────
module purge
module load hmmer/3.3.2

echo "=== Building HMM for Histolytica SINE1 ==="
hmmbuild 04_MSA_HMM/histolytica/SINE1.hmm \
        04_MSA_HMM/histolytica/SINE1.aln
hmmpress 04_MSA_HMM/histolytica/SINE1.hmm

echo "=== Building HMM for Dispar EdSINE1 ==="
hmmbuild 04_MSA_HMM/dispar/SINE1.hmm \
        04_MSA_HMM/dispar/SINE1.aln
hmmpress 04_MSA_HMM/dispar/SINE1.hmm

# ─────────────────────────────────────────────────────────────────────────────
# Verification
# ─────────────────────────────────────────────────────────────────────────────
echo "=== Verify HMM NAME fields ==="
grep -m1 '^NAME' 04_MSA_HMM/histolytica/SINE1.hmm
grep -m1 '^NAME' 04_MSA_HMM/dispar/SINE1.hmm

echo "=== Check model lengths ==="
grep '^LENG' 04_MSA_HMM/histolytica/SINE1.hmm
grep '^LENG' 04_MSA_HMM/dispar/SINE1.hmm
#!/usr/bin/env bash

cd ~/Edispar_SINE_project_2

module purge
module load hmmer/3.3.2

for sp in histolytica dispar; do
  echo "=== nhmmer scan: $sp ==="
  outdir="05_nhmmer/$sp"
  mkdir -p "$outdir"

  if [ "$sp" = histolytica ]; then
    model="04_MSA_HMM/histolytica/SINE1.hmm"
    genome="00_inputs/histolytica/GCA_000208925.2_JCVI_ESG2_1.0_genomic.fna"
  else
    model="04_MSA_HMM/dispar/SINE1.hmm"
    genome="00_inputs/dispar/GCA_000209125.2_JCVI_EDISG_1.0_genomic.fna"
  fi

  # Run nhmmer
  nhmmer --tblout "$outdir/SINE1_vs_genome.tbl" \
         --cpu 8 --noali \
         "$model" "$genome" \
    > "$outdir/SINE1_vs_genome.out"

  # Filter for alignment length ≥ 400 nt, output BED
  awk 'BEGIN{OFS="\t"}
       !/^#/ {
         # target name, ali start, ali end are $1, $7, $8
         len = $8 - $7 + 1
         if (len >= 400) {
           # convert to 0-based start
           print $1, $7-1, $8
         }
       }
      ' "$outdir/SINE1_vs_genome.tbl" \
    > "$outdir/SINE1_hmm_len400.bed"

  echo -n "$sp HMM hits ≥400 nt: "
  wc -l < "$outdir/SINE1_hmm_len400.bed"
done
        
#!/usr/bin/env bash
set -euo pipefail

# Loop through histolytica and dispar species
for sp in histolytica dispar; do
  echo "=== Merging SINE1 calls for $sp ==="
  
  # Define input files for each species
  if [ "$sp" = histolytica ]; then
    FT=01_feature_tables/histolytica/SINE1_fixed.bed
    RM=02_repeatmasker/histolytica/RM_SINE1.bed
    HMM=05_nhmmer/histolytica/SINE1_hmm_len400.bed
    OUT=08_SINE1_union/histolytica/SINE1_union.bed
  else
    FT=01_feature_tables/dispar/EdSINE1_fixed.bed
    RM=02_repeatmasker/dispar/RM_SINE1.bed
    HMM=05_nhmmer/dispar/SINE1_hmm_len400.bed
    OUT=08_SINE1_union/dispar/SINE1_union.bed
  fi

  # Create output directory if it doesn't exist
  mkdir -p "$(dirname "$OUT")"

  # Prepare individual BED files for FT, RM, HMM
  awk 'BEGIN{OFS="\t"}{print $1,$2,$3,"FT"}' "$FT" > tmp_FT.bed
  awk 'BEGIN{OFS="\t"}{print $1,$2,$3,"RM"}' "$RM" > tmp_RM.bed
  awk 'BEGIN{OFS="\t"}{print $1,$2,$3,"HMM"}' "$HMM" > tmp_HMM.bed

  # Merge the BED files and save the union
  cat tmp_FT.bed tmp_RM.bed tmp_HMM.bed | sort -k1,1 -k2,2n | bedtools merge -i - -c 4 -o distinct > "$OUT"

  # Remove temporary files
  rm tmp_FT.bed tmp_RM.bed tmp_HMM.bed

  # Output the number of merged intervals
  echo -n "$sp union intervals: "
  wc -l < "$OUT"
done

#!/usr/bin/env bash
set -euo pipefail

# Load bedtools
module load bedtools/2.31.1

# Loop through histolytica and dispar species
for sp in histolytica dispar; do
  UNION=08_SINE1_union/$sp/SINE1_union.bed
  OUTDIR=08_SINE1_union/$sp/set_comparisons
  mkdir -p "$OUTDIR"

  # FT-only (in feature table but not RM or HMM)
  awk -F'\t' '$4=="FT" {print $1"\t"$2"\t"$3}' "$UNION" \
    > "$OUTDIR/${sp}_FT_only.bed"

  # RM-only (in RepeatMasker but not FT or HMM)
  awk -F'\t' '$4=="RM" {print $1"\t"$2"\t"$3}' "$UNION" \
    > "$OUTDIR/${sp}_RM_only.bed"

  # HMM-only (in nhmmer but not FT or RM)
  awk -F'\t' '$4=="HMM" {print $1"\t"$2"\t"$3}' "$UNION" \
    > "$OUTDIR/${sp}_HMM_only.bed"

  echo "[$sp] FT-only: $(wc -l < "$OUTDIR/${sp}_FT_only.bed")"
  echo "[$sp] RM-only: $(wc -l < "$OUTDIR/${sp}_RM_only.bed")"
  echo "[$sp] HMM-only: $(wc -l < "$OUTDIR/${sp}_HMM_only.bed")"
done

# 1) Load modules
module load samtools/1.6
module load stringtie/1.3.4c

# 2) Define base paths
BASEDIR=$HOME/Edispar_SINE_project_2
H_GFF_IN=$BASEDIR/00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.gff3
H_GFF=$BASEDIR/00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.fixed2.gff3
D_GFF_IN=$BASEDIR/00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed.gff
D_GFF=$BASEDIR/00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed2.gff
RNA_H=$BASEDIR/06_RNAseq_align/histolytica
RNA_D=$BASEDIR/06_RNAseq_align/dispar
OUT_H=$BASEDIR/07_StringTie/histolytica/A_genes_only
OUT_D=$BASEDIR/07_StringTie/dispar/A_genes_only

# 3) Fix contig names in GFFs (append “.1” everywhere)
awk 'BEGIN{OFS="\t"}
  /^##sequence-region/ { $2 = $2".1" }
  !/^##/ { if ($1 !~ /\.1$/) $1 = $1".1" }
  { print }
' "$H_GFF_IN" > "$H_GFF"

awk 'BEGIN{OFS="\t"}
  /^##sequence-region/ { $2 = $2".1" }
  !/^##/ { if ($1 !~ /\.1$/) $1 = $1".1" }
  { print }
' "$D_GFF_IN" > "$D_GFF"

# 4) Guided assembly (“genes-only”) for each sample

# E. histolytica
mkdir -p "$OUT_H"
for bam in "$RNA_H"/SRR*.bam; do
  sample=$(basename "$bam" .bam)
  echo "[`date +%T`] Histo guided (genes-only): $sample"
  stringtie -G "$H_GFF" -e -B -p 4 \
            -o "$OUT_H/${sample}.guided.gtf" \
            "$bam"
done

# E. dispar
mkdir -p "$OUT_D"
for bam in "$RNA_D"/SRR*.bam; do
  sample=$(basename "$bam" .bam)
  echo "[`date +%T`] Dispar guided (genes-only): $sample"
  stringtie -G "$D_GFF" -e -B -p 4 \
            -o "$OUT_D/${sample}.guided.gtf" \
            "$bam"
done

# Set file paths with full paths
GFF_FILE="$HOME/Edispar_SINE_project_2/00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.fixed2.gff3"
SINE1_UNION_FILE="$HOME/Edispar_SINE_project_2/08_SINE1_union/histolytica/SINE1_union.bed"

# Verify file paths
echo "$GFF_FILE"
echo "$SINE1_UNION_FILE"

# Check files
ls "$GFF_FILE"
ls "$SINE1_UNION_FILE"

# Set file paths for histolytica and dispar GFF and SINE files
GFF_FILE="/users/guests/guest5/Edispar_SINE_project_2/00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.fixed2.gff3"
SINE1_UNION_FILE="/users/guests/guest5/Edispar_SINE_project_2/08_SINE1_union/histolytica/SINE1_union.bed"
AUGMENTED_GTF_FILE="/users/guests/guest5/Edispar_SINE_project_2/07_StringTie/histolytica/B_genes_plus_SINEs/augmented.gtf"

# Ensure output directory exists
mkdir -p "$(dirname "$AUGMENTED_GTF_FILE")"

# Step 1: Combine gene annotations and SINE regions into augmented GTF
awk -v OFS='\t' '
  FNR==NR {
    # Process GFF file to include gene, mRNA, exon, CDS
    if ($0 ~ /^#/ ) next
    if ($3=="gene" || $3=="mRNA" || $3=="exon" || $3=="CDS") {
      split($9, A, ";")
      id = A[1]
      print $1, $2, $3, $4, $5, $6, $7, $8, "gene_id \"" id "\"; transcript_id \"" id "\";"
    }
    next
  }
  {
    # Add SINE regions as transcript and exon features
    chr   = $1
    start = $2 + 1  # GTF is 1-based, so we add 1 for start position
    end   = $3
    id    = "SINE1_" NR
    print chr, "StringTie", "transcript", start, end, ".", "+", ".", "gene_id \"" id "\"; transcript_id \"" id "\";"
    print chr, "StringTie", "exon", start, end, ".", "+", ".", "gene_id \"" id "\"; transcript_id \"" id "\";"
  }
' "$GFF_FILE" <(cut -f1-3 "$SINE1_UNION_FILE") > "$AUGMENTED_GTF_FILE"

echo "Augmented GTF file created at: $AUGMENTED_GTF_FILE"

# Set file paths for dispar
GFF_FILE="/users/guests/guest5/Edispar_SINE_project_2/00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed2.gff"
SINE1_UNION_FILE="/users/guests/guest5/Edispar_SINE_project_2/08_SINE1_union/dispar/SINE1_union.bed"
AUGMENTED_GTF_FILE="/users/guests/guest5/Edispar_SINE_project_2/07_StringTie/dispar/B_genes_plus_SINEs/augmented.gtf"

# Ensure output directory exists
mkdir -p "$(dirname "$AUGMENTED_GTF_FILE")"

# Step 1: Combine gene annotations and SINE regions into augmented GTF
awk -v OFS='\t' '
  FNR==NR {
    # Process GFF file to include gene, mRNA, exon, CDS
    if ($0 ~ /^#/ ) next
    if ($3=="gene" || $3=="mRNA" || $3=="exon" || $3=="CDS") {
      split($9, A, ";")
      id = A[1]
      print $1, $2, $3, $4, $5, $6, $7, $8, "gene_id \"" id "\"; transcript_id \"" id "\";"
    }
    next
  }
  {
    # Add SINE regions as transcript and exon features
    chr   = $1
    start = $2 + 1  # GTF is 1-based, so we add 1 for start position
    end   = $3
    id    = "SINE1_" NR
    print chr, "StringTie", "transcript", start, end, ".", "+", ".", "gene_id \"" id "\"; transcript_id \"" id "\";"
    print chr, "StringTie", "exon", start, end, ".", "+", ".", "gene_id \"" id "\"; transcript_id \"" id "\";"
  }
' "$GFF_FILE" <(cut -f1-3 "$SINE1_UNION_FILE") > "$AUGMENTED_GTF_FILE"

echo "Augmented GTF file created at: $AUGMENTED_GTF_FILE"

# ───────────────────────────────────────────────────────────────────────────────
# 9b) Guided assembly: “genes + SINEs” using fixed2 GFFs
# ───────────────────────────────────────────────────────────────────────────────

# Assuming HISTO_GFF and DISPAR_GFF are defined at the top:
#   HISTO_GFF=00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.fixed2.gff3
#   DISPAR_GFF=00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed2.gff

for sp in histolytica dispar; do
  # select the correct GFF
  if [ "$sp" = histolytica ]; then
    REF="$HISTO_GFF"
  else
    REF="$DISPAR_GFF"
  fi

  RNA_DIR="06_RNAseq_align/$sp"
  UNION_BED="08_SINE1_union/$sp/SINE1_union.bed"
  AUG_GTF="07_StringTie/$sp/B_genes_plus_SINEs/augmented.gtf"
  OUT_DIR="07_StringTie/$sp/B_genes_plus_SINEs"

  mkdir -p "$(dirname "$AUG_GTF")" "$OUT_DIR"
  echo "=== 9b: $sp genes+SINEs with annotation $REF ==="

  # build augmented GTF: existing genes + SINE_union intervals
  awk -v OFS='\t' '
    FNR==NR {
      # include only gene/mRNA/exon/CDS from the reference GFF
      if ($0 ~ /^#/ ) next
      if ($3=="gene"||$3=="mRNA"||$3=="exon"||$3=="CDS") {
        split($9, A, ";")
        id = A[1]
        print $1, $2, $3, $4, $5, $6, $7, $8, "gene_id \"" id "\"; transcript_id \"" id "\";"
      }
      next
    }
    {
      # for each SINE interval, add transcript + exon features
      chr   = $1
      start = $2 + 1
      end   = $3
      id    = "SINE1_" NR
      print chr, "StringTie", "transcript", start, end, ".", "+", ".", "gene_id \"" id "\"; transcript_id \"" id "\";"
      print chr, "StringTie", "exon",      start, end, ".", "+", ".", "gene_id \"" id "\"; transcript_id \"" id "\";"
    }
  ' "$REF" <(cut -f1-3 "$UNION_BED") > "$AUG_GTF"

  # run StringTie with the augmented GTF
  for bam in "$RNA_DIR"/SRR*.bam; do
    sample=$(basename "$bam" .bam)
    echo "[`date +%T`] $sp genes+SINEs: $sample"
    stringtie -G "$AUG_GTF" -e -B -p 4 \
      -o "$OUT_DIR/${sample}.genes_plus_SINEs.gtf" \
      "$bam"
  done
done

# =============================================================================
# 9c) Ab-initio transcript assembly (both species)
# =============================================================================
module load stringtie/1.3.4c

for sp in histolytica dispar; do
  RNA_DIR="$BASEDIR/06_RNAseq_align/$sp"
  OUT_DIR="$BASEDIR/07_StringTie/$sp/C_abinitio"
  mkdir -p "$OUT_DIR"

  echo "=== 9c: $sp ab-initio assembly ==="
  for bam in "$RNA_DIR"/SRR*.bam; do
    sample=$(basename "$bam" .bam)
    echo "[`date +%T`] $sp ab-initio: $sample"
    stringtie --rf -p 4 \
      -o "$OUT_DIR/${sample}.abinitio.gtf" \
      "$bam"
  done
done

cd ~/Edispar_SINE_project_2

# Load the bedtools module
module load bedtools/2.31.1

# Ensure output dirs exist
mkdir -p 10_novel_transcripts/{histolytica,dispar}

# 1a) Sort the union‐SINE calls into our new folder
sort -k1,1 -k2,2n \
  08_SINE1_union/histolytica/SINE1_union.bed \
> 10_novel_transcripts/histolytica/histo_SINE_union.bed

sort -k1,1 -k2,2n \
  08_SINE1_union/dispar/SINE1_union.bed \
> 10_novel_transcripts/dispar/dispar_SINE_union.bed

# 1b) (You should already have:)
#    10_novel_transcripts/histolytica/histo_genes.bed
#    10_novel_transcripts/dispar/dispar_genes.bed
#    09_SINE1_downstream/.../all_abinitio_transcripts.bed

# 1c) Filter out any transcript overlapping a known gene or SINE

# Histolytica
bedtools intersect -v \
  -a 09_SINE1_downstream/histolytica/all_abinitio_transcripts.bed \
  -b 10_novel_transcripts/histolytica/histo_genes.bed \
| bedtools intersect -v \
  -a - \
  -b 10_novel_transcripts/histolytica/histo_SINE_union.bed \
> 10_novel_transcripts/histolytica/histo_novel_transcripts.bed

# Dispar
bedtools intersect -v \
  -a 09_SINE1_downstream/dispar/all_abinitio_transcripts.bed \
  -b 10_novel_transcripts/dispar/dispar_genes.bed \
| bedtools intersect -v \
  -a - \
  -b 10_novel_transcripts/dispar/dispar_SINE_union.bed \
> 10_novel_transcripts/dispar/dispar_novel_transcripts.bed

# 1d) Quick check
ls -lh 10_novel_transcripts/{histolytica,dispar}/*.bed


# =============================================================================
# 10a. Convert ab-initio GTFs to BED
# =============================================================================
for sp in histolytica dispar; do
  ABI_GTF_DIR="07_StringTie/$sp/C_abinitio"
  ABI_BED="09_SINE1_downstream/$sp/all_abinitio_transcripts.bed"
  mkdir -p "$(dirname "$ABI_BED")"
  awk -F'\t' 'BEGIN{OFS="\t"}
    $3=="transcript" {
      chr   = $1
      start = $4 - 1
      end   = $5
      match($9, /transcript_id "([^"]+)"/, m)
      tid   = m[1]
      print chr, start, end, tid
    }' "$ABI_GTF_DIR"/*.gtf > "$ABI_BED"
  echo "  → $sp: $(wc -l < "$ABI_BED") transcripts in BED"
done

# =============================================================================
# 10b. Find expressed SINE1 overlaps
# =============================================================================
module load bedtools/2.31.1
for sp in histolytica dispar; do
  ABI_BED="09_SINE1_downstream/$sp/all_abinitio_transcripts.bed"
  UNION_BED="08_SINE1_union/$sp/SINE1_union.bed"
  EXP_BED="09_SINE1_downstream/$sp/expressed_SINEs_abinitio.bed"
  mkdir -p "$(dirname "$EXP_BED")"
  bedtools intersect -u -a "$ABI_BED" -b "$UNION_BED" > "$EXP_BED"
  echo "  → $sp: $(wc -l < "$EXP_BED") expressed‐SINE transcripts"
done

# =============================================================================
# 10c. List expressed SINE transcript IDs
# =============================================================================
for sp in histolytica dispar; do
  EXP_BED="09_SINE1_downstream/$sp/expressed_SINEs_abinitio.bed"
  OUT_TXT="09_SINE1_downstream/$sp/${sp}_expressed_SINE_txids.txt"
  cut -f4 "$EXP_BED" | sort -u > "$OUT_TXT"
  echo "  → $sp: $(wc -l < "$OUT_TXT") unique expressed‐SINE transcript IDs"
done

echo "=== 10c: Listing expressed SINE transcript IDs ==="
for sp in histolytica dispar; do
  EXP_BED="09_SINE1_downstream/$sp/expressed_SINEs_abinitio.bed"
  OUT_TXT="09_SINE1_downstream/$sp/${sp}_expressed_SINE_txids.txt"
  cut -f4 "$EXP_BED" | sort -u > "$OUT_TXT"
  echo "→ $sp: $(wc -l < "$OUT_TXT") unique expressed‐SINE transcript IDs"
  echo "  Sample IDs: $(head -n3 "$OUT_TXT" | tr '\n' ' ') …"
done

# ────────────────────────────────────────────────────────────────────────────
# 10d) Sanity check: confirm novel transcripts truly lie outside genes & SINEs
# ────────────────────────────────────────────────────────────────────────────

cd ~/Edispar_SINE_project_2
module load bedtools/2.31.1

echo "Histo → overlaps with genes:"
bedtools intersect -u \
  -a 10_novel_transcripts/histolytica/histo_novel_transcripts.bed \
  -b 10_novel_transcripts/histolytica/histo_genes.bed \
| wc -l

echo "Histo → overlaps with SINE_union:"
bedtools intersect -u \
  -a 10_novel_transcripts/histolytica/histo_novel_transcripts.bed \
  -b 10_novel_transcripts/histolytica/histo_SINE_union.bed \
| wc -l

echo "Dispar → overlaps with genes:"
bedtools intersect -u \
  -a 10_novel_transcripts/dispar/dispar_novel_transcripts.bed \
  -b 10_novel_transcripts/dispar/dispar_genes.bed \
| wc -l

echo "Dispar → overlaps with SINE_union:"
bedtools intersect -u \
  -a 10_novel_transcripts/dispar/dispar_novel_transcripts.bed \
  -b 10_novel_transcripts/dispar/dispar_SINE_union.bed \
| wc -l

# ────────────────────────────────────────────────────────────────────────────
# 10e) (fixed) Classify each expressed SINE transcript exactly once
# ────────────────────────────────────────────────────────────────────────────

cd ~/Edispar_SINE_project_2

module load bedtools/2.31.1

mkdir -p 10_SINE1_extension_classification/{histolytica,dispar}

for sp in histolytica dispar; do
  IN_EXP=09_SINE1_downstream/$sp/expressed_SINEs_abinitio.bed
  IN_UNION=08_SINE1_union/$sp/SINE1_union.bed
  OUT=10_SINE1_extension_classification/$sp/extension_classification.tsv

  echo -e "tx_id\tsine_coord\tstatus" > "$OUT"

  bedtools intersect -a "$IN_EXP" -b "$IN_UNION" -wa -wb \
  | awk 'BEGIN{OFS="\t"}
      !seen[$4]++ {
        tx_id      = $4
        tx_start   = $2
        tx_end     = $3
        sine_chr   = $5
        sine_start = $6
        sine_end   = $7

        if      (tx_start==sine_start && tx_end==sine_end)       status="exact"
        else if (tx_start < sine_start   && tx_end <= sine_end)   status="upstream_ext"
        else if (tx_start >= sine_start  && tx_end > sine_end)    status="downstream_ext"
        else                                                      status="both_ext"

        printf("%s\t%s:%d-%d\t%s\n",
               tx_id, sine_chr, sine_start, sine_end, status)
      }' >> "$OUT"
done

# ────────────────────────────────────────────────────────────────────────────
# 10f) Double‐check that classification counts match expectations
# ────────────────────────────────────────────────────────────────────────────

for sp in histolytica dispar; do
  N_EXP=$(wc -l < 09_SINE1_downstream/$sp/expressed_SINEs_abinitio.bed)
  N_CLASS=$(( $(wc -l < 10_SINE1_extension_classification/$sp/extension_classification.tsv) - 1 ))

  echo "=== $sp ==="
  echo "Expressed transcripts: $N_EXP"
  echo "Classified transcripts: $N_CLASS"
done

# Expected output:
# === histolytica ===
# Expressed transcripts: 590
# Classified transcripts: 577
#
# === dispar ===
# Expressed transcripts: 756
# Classified transcripts: 745


  # 11a) Extract per-base depth around each expressed SINE locus (±200 nt)
  while read chr start end tid; do
    rs=$(( start - 200 )); (( rs < 0 )) && rs=0
    re=$(( end + 200 ))
    region="${chr}:${rs}-${re}"
    for bam in "$BAM_DIR"/SRR*.bam; do
      sample=$(basename "$bam" .bam)
      out="$DEPTH_DIR/${tid}_${sample}.depth.txt"
      samtools depth -r "$region" "$bam" > "$out"
    done
  done < "$EXP_BED"

  echo "→ Depth files written for $sp to $DEPTH_DIR"

  # 11b) Summarise mean depth inside SINE vs in flanks, skipping short regions
  SUMMARY=09_SINE1_downstream/$sp/depths/all_depths_summary.tsv
  CANDIDATES=09_SINE1_downstream/$sp/depths/extension_candidates.tsv

  echo -e "locus\tbam\tmean_in_SINE\tmean_in_flanks" > "$SUMMARY"

  for file in "$DEPTH_DIR"/*.depth.txt; do
    sample=$(basename "$file" | sed -E 's/^[^_]+_(SRR[0-9]+)\.depth\.txt$/\1/')
    locus=$(basename "$file" | sed -E 's/^([^_]+)_SRR[0-9]+\.depth\.txt$/\1/')

    awk -v flank=200 -v locus="$locus" -v bam="$sample" -v OFS="\t" '
      { d[NR] = $3 }
      END {
        n = NR
        if (n > 2*flank) {
          sum_in = 0; cnt_in = 0
          for (i = flank+1; i <= n-flank; i++) {
            sum_in += d[i]; cnt_in++
          }
          sum_fl = 0; cnt_fl = 0
          for (i = 1; i <= flank; i++) {
            sum_fl += d[i]; cnt_fl++
          }
          for (i = n-flank+1; i <= n; i++) {
            sum_fl += d[i]; cnt_fl++
          }
          print locus, bam, sum_in/cnt_in, sum_fl/cnt_fl
        }
      }
    ' "$file" >> "$SUMMARY"
  done

  # Identify extension candidates (flank > inside)
  awk 'NR==1 { print; next } $4 > $3 { print }' "$SUMMARY" > "$CANDIDATES"

  echo "→ $sp depth summarisation done; see $SUMMARY and $CANDIDATES"
done

cd /users/guests/guest5/Edispar_SINE_project_2
module purge
module load cufflinks emboss blast/2.11.0 seqtk bedtools

#!/usr/bin/env bash

cd ~/Edispar_SINE_project_2

# 1) Load tools
module purge
module load cufflinks/2.2.1   # provides gffread
module load emboss/6.6        # provides getorf
module load blast/2.11.0     # provides makeblastdb & blastp

# 2) Merge & dedupe ab-initio GTFs
for sp in histolytica dispar; do
  raw="merged_${sp}_abinitio.gtf"
  final="merged_${sp}_abinitio.final.gtf"

  echo -e "\n>> [$sp] Merging → $raw"
  grep -hP "^\S+\t.*\t(transcript|exon|CDS)\t" \
    07_StringTie/$sp/C_abinitio/*.gtf \
    > "$raw"

  echo ">> [$sp] Deduplicating → $final"
  awk -F'\t' 'BEGIN{OFS="\t"}
    {
      if (match($9,/transcript_id "([^"]+)"/,m)) id=m[1]
      else next
      if      ($3=="transcript")               { if (!seen[id]++) print }
      else if (($3=="exon"||$3=="CDS") && seen[id]) { print }
    }
  ' "$raw" > "$final"
done

# 3) Rebuild full transcript FASTAs
for sp in histolytica dispar; do
  if [ "$sp" = histolytica ]; then
    GTF="merged_histolytica_abinitio.final.gtf"
    REF="00_inputs/histolytica/GCA_000208925.2_JCVI_ESG2_1.0_genomic.fna"
    out="histo_abinitio_transcripts.fna"
  else
    GTF="merged_dispar_abinitio.final.gtf"
    REF="00_inputs/dispar/GCA_000209125.2_JCVI_EDISG_1.0_genomic.fna"
    out="dispar_abinitio_transcripts.fna"
  fi

  echo -e "\n>> [$sp] gffread → $out"
  gffread "$GTF" -g "$REF" -w "$out"
done

# 4) Simplify headers
for prefix in histo dispar; do
  in="${prefix}_abinitio_transcripts.fna"
  out="${prefix}_abinitio_transcripts_id.fna"
  echo ">> Simplify headers: $in → $out"
  awk '/^>/{ sub(/^>[^:]+:/, ">"); sub(/ .*/,"") }1' "$in" > "$out"
done

# 5) Extract expressed-SINE transcripts
for sp in histolytica dispar; do
  HID="09_SINE1_downstream/$sp/${sp}_expressed_SINE_txids.txt"
  if [ "$sp" = histolytica ]; then
    in="histo_abinitio_transcripts_id.fna"
    out="histo_expressed_SINE_transcripts.fna"
  else
    in="dispar_abinitio_transcripts_id.fna"
    out="dispar_expressed_SINE_transcripts.fna"
  fi

  echo -e "\n>> [$sp] Extracting → $out"
  awk -v ids="$HID" '
    BEGIN { while (getline < ids) keep[$1]=1; close(ids) }
    /^>/ { name=substr($1,2); printing = (name in keep) }
    printing { print }
  ' "$in" > "$out"
done

# 6) Predict ORFs (min 150 aa)
for sp in histolytica dispar; do
  if [ "$sp" = histolytica ]; then
    seq="histo_expressed_SINE_transcripts.fna"
    out="histo_SINE_proteins.faa"
  else
    seq="dispar_expressed_SINE_transcripts.fna"
    out="dispar_SINE_proteins.faa"
  fi

  echo -e "\n[ $(date +%T) ] Predicting ORFs in $sp → $out"
  getorf -sequence "$seq" -outseq "$out" -minsize 150
  echo "   → $(grep -c '^>' "$out") ORFs"
done

# 7) Build BLAST DBs
echo -e "\n>> Building BLAST DBs"
makeblastdb -in histo_SINE_proteins.faa  -dbtype prot -out histo_SINE.db
makeblastdb -in dispar_SINE_proteins.faa -dbtype prot -out dispar_SINE.db

# 8) Reciprocal BLASTp
echo -e "\n>> Reciprocal BLASTp"
blastp -query dispar_SINE_proteins.faa -db histo_SINE.db \
       -out d2h.tsv -outfmt '6 qseqid sseqid' -max_target_seqs 1 -num_threads 4
blastp -query histo_SINE_proteins.faa  -db dispar_SINE.db \
       -out h2d.tsv -outfmt '6 qseqid sseqid' -max_target_seqs 1 -num_threads 4

# 9) Filter RBH
echo -e "\n>> Filtering RBH → rbh_SINE.tsv"
awk 'NR==FNR{ m[$1]=$2; next } m[$2]==$1 { print $2, $1 }' h2d.tsv d2h.tsv \
  > rbh_SINE.tsv

# 10) Final comparative table (_n suffix stripped)
echo -e "\n>> Building comparative_SINE.tsv"
HID="09_SINE1_downstream/histolytica/histolytica_expressed_SINE_txids.txt"
DID="09_SINE1_downstream/dispar/dispar_expressed_SINE_txids.txt"

{
  echo -e "Histo_TX\tDispar_TX\tHisto_expressed\tDispar_expressed"
  while read -r h_orf d_orf; do
    base_h=${h_orf%%_*}
    base_d=${d_orf%%_*}
    hexp=$(grep -qx "$base_h" "$HID" && echo yes || echo no)
    dexp=$(grep -qx "$base_d" "$DID" && echo yes || echo no)
    echo -e "${h_orf}\t${d_orf}\t${hexp}\t${dexp}"
  done < rbh_SINE.tsv
} > comparative_SINE.tsv

# 11) Quick smoke-test
echo -e "\n=== Step 12 smoke-test ==="
wc -l comparative_SINE.tsv
head -n5 comparative_SINE.tsv
grep -c $'\tyes\t' comparative_SINE.tsv

echo -e "\nDone! Step 12 is complete.\n"
#!/usr/bin/env bash
set -euo pipefail

# Step 1: Adjust Negative Start Positions (Ensure start positions are non-negative)

# For Histolytica - Fix negative start positions
awk 'BEGIN{OFS="\t"}{
  if ($2 < 0) $2 = 0;  # Ensure start position is non-negative
  print $1, $2, $3, $4, $5, $6
}' /tmp/histolytica_sine_coords.bed > /tmp/histolytica_sine_coords_0based_corrected.bed

# For Dispar - Fix negative start positions
awk 'BEGIN{OFS="\t"}{
  if ($2 < 0) $2 = 0;  # Ensure start position is non-negative
  print $1, $2, $3, $4, $5, $6
}' /tmp/dispar_sine_coords.bed > /tmp/dispar_sine_coords_0based_corrected.bed

# Step 2: Remove `.1` Suffix from Chromosome Names (Optional, if necessary)

# For Histolytica - Remove `.1` from chromosome names
awk 'BEGIN{OFS="\t"} {sub(/\.[0-9]+$/, "", $1); print $0}' /tmp/histolytica_sine_coords_0based_corrected.bed > /tmp/histolytica_sine_coords_0based_fixed.bed

# For Dispar - Remove `.1` from chromosome names
awk 'BEGIN{OFS="\t"} {sub(/\.[0-9]+$/, "", $1); print $0}' /tmp/dispar_sine_coords_0based_corrected.bed > /tmp/dispar_sine_coords_0based_fixed.bed

# Step 3: Perform bedtools Intersection

# For Histolytica - Run the intersection with the cleaned and fixed files
bedtools intersect -a /tmp/histolytica_sine_coords_0based_fixed.bed -b 00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.cleaned.sorted.gff3 -wa -wb > /tmp/histolytica_intersect_corrected.bed

# For Dispar - Run the intersection with the cleaned and fixed files
bedtools intersect -a /tmp/dispar_sine_coords_0based_fixed.bed -b 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.cleaned.sorted.gff -wa -wb > /tmp/dispar_intersect_corrected.bed

# Step 4: Verify Results

# For Histolytica - Check the number of intersections
wc -l /tmp/histolytica_intersect_corrected.bed
head -n 10 /tmp/histolytica_intersect_corrected.bed

# For Dispar - Check the number of intersections
wc -l /tmp/dispar_intersect_corrected.bed
head -n 10 /tmp/dispar_intersect_corrected.bed

# Clean histolytica proteins file
awk '/^>/ {print $0} !/^>/ {gsub(/[^A-Za-z]/, ""); print}' 00_inputs/histolytica/histo_proteins.faa > 00_inputs/histolytica/histo_proteins_cleaned_test.faa
wc -l 00_inputs/histolytica/histo_proteins_cleaned_test.faa

# Clean dispar proteins file
awk '/^>/ {print $0} !/^>/ {gsub(/[^A-Za-z]/, ""); print}' 00_inputs/dispar/dispar_proteins.faa > 00_inputs/dispar/dispar_proteins_cleaned_test.faa
wc -l 00_inputs/dispar/dispar_proteins_cleaned_test.faa


# Step 0.2: Building full-proteome BLAST DBs
echo "► Step 0.2: Building full-proteome BLAST DBs…"
module purge
module load blast
mkdir -p 10_flanking_genes/{histolytica,dispar}/blastdb

# Build BLAST DB for Histolytica, if not already built
if [[ ! -f 10_flanking_genes/histolytica/blastdb/histo_full_db.nhr ]]; then
  makeblastdb \
    -in 00_inputs/histolytica/histo_proteins.faa \
    -dbtype prot -parse_seqids \
    -out 10_flanking_genes/histolytica/blastdb/histo_full_db \
    -logfile 10_flanking_genes/histolytica/blastdb/histo_makeblastdb.log
  echo "   Histolytica BLAST DB created."
else
  echo "   Histolytica BLAST DB already exists, skipping creation."
fi

# Build BLAST DB for Dispar, if not already built
if [[ ! -f 10_flanking_genes/dispar/blastdb/dispar_full_db.nhr ]]; then
  makeblastdb \
    -in 00_inputs/dispar/dispar_proteins.faa \
    -dbtype prot -parse_seqids \
    -out 10_flanking_genes/dispar/blastdb/dispar_full_db \
    -logfile 10_flanking_genes/dispar/blastdb/dispar_makeblastdb.log
  echo "   Dispar BLAST DB created."
else
  echo "   Dispar BLAST DB already exists, skipping creation."
fi

echo "   → Databases built in 10_flanking_genes/*/blastdb/"

BP=10_flanking_genes/blastp
mkdir -p "$BP"

# Histolytica vs Dispar
[[ -s $BP/h2d_full.tsv ]] || blastp \
    -query 00_inputs/histolytica/histo_proteins.faa \
    -db 10_flanking_genes/dispar/blastdb/dispar_full_db \
    -out $BP/h2d_full.tsv \
    -outfmt "6 qseqid sseqid bitscore evalue" \
    -max_target_seqs 1 -max_hsps 1 -num_threads 4

# Dispar vs Histolytica
[[ -s $BP/d2h_full.tsv ]] || blastp \
    -query 00_inputs/dispar/dispar_proteins.faa \
    -db 10_flanking_genes/histolytica/blastdb/histo_full_db \
    -out $BP/d2h_full.tsv \
    -outfmt "6 qseqid sseqid bitscore evalue" \
    -max_target_seqs 1 -max_hsps 1 -num_threads 4

# Sort and select the top hit per query from both BLASTP files

# For h2d_full.tsv (histolytica to dispar)
sort -k1,1 -k3,3nr 10_flanking_genes/blastp/h2d_full.tsv | awk '!seen[$1]++' > /tmp/h2d.best

# For d2h_full.tsv (dispar to histolytica)
sort -k1,1 -k3,3nr 10_flanking_genes/blastp/d2h_full.tsv | awk '!seen[$1]++' > /tmp/d2h.best

# You can now inspect the result in /tmp/h2d.best and /tmp/d2h.best

awk 'NR==FNR{m[$1]=$2;next} m[$2]==$1{print $1,$2}' /tmp/h2d.best /tmp/d2h.best > 10_flanking_genes/blastp/reciprocal_best_hits_full.tsv


# Here’s the correct code for step 8 that creates the combined gene list in BED format:

# Process histolytica gene entries and dispar protein-coding gene entries
awk 'BEGIN{OFS="\t"} 
  # Process histolytica gene entries
  $3 == "gene" { 
    print $1, $4-1, $5, $9
  } 
  # Process dispar protein-coding gene entries
  $3 == "protein_coding_gene" { 
    print $1, $4-1, $5, $9 
  }' 00_inputs/histolytica/histo_genes_only.gff3 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed2.gff.sorted.gff3 \
| sed -E 's/ID=([^;]+);.*/\1/' \
| sort -k1,1 -k2,2n > 10_flanking_genes/combined_genes.bed


# After running the makeblastdb commands, you can view the logs:
cat 10_flanking_genes/histolytica/blastdb/histo_makeblastdb.log
cat 10_flanking_genes/dispar/blastdb/dispar_makeblastdb.log

#!/bin/bash
# Load bedtools
module load bedtools/2.31.1

# Loop through Histolytica and Dispar species
for sp in histolytica dispar; do
  echo "=== Flagging transcription for $sp ==="
  
  # Define input files
  MAP=10_flanking_genes/$sp/SINE1_to_gene_all.tsv
  EXP=09_SINE1_downstream/$sp/expressed_SINEs_abinitio.bed
  OUT=10_flanking_genes/$sp/SINE1_to_gene_all_exprflag.tsv

  # Format the mapping file (split the locus into chr, start, and end)
  awk -F'\t' 'BEGIN{OFS="\t"}{
    split($1,a,":|-"); 
    print a[1],a[2],a[3],$1,$2 
  }' "$MAP" > /tmp/SINE1_all.bed

  # Count the intersection with expressed SINEs (whether the SINE is expressed or not)
  bedtools intersect -c -a /tmp/SINE1_all.bed -b "$EXP" > /tmp/SINE1_cnt.bed

  # Flag transcribed or not based on overlap (if the count > 0, it's transcribed)
  awk 'BEGIN{OFS="\t"; print "sine_locus","gene_id","sine_transcribed"} 
       { trans=($5>0?"yes":"no"); print $4,$6,trans }' /tmp/SINE1_cnt.bed > "$OUT"

  # Output the result
  echo "[$sp] 13C: flagged $(wc -l < "$OUT") loci (incl. header)"
done

#!/usr/bin/env bash
set -euo pipefail

# Change to the project directory
cd ~/Edispar_SINE_project_2

# Load the required module
module load bedtools/2.31.1

# ───────────────────────────────────────────────────────────
# 13C) Flag each union SINE for transcription (yes/no)
# ───────────────────────────────────────────────────────────
for sp in histolytica dispar; do
  # Map SINE loci to genes (already done in Step 13B, we're using the result from here)
  MAP=10_flanking_genes/$sp/SINE1_to_gene_all.tsv

  # Expression file for SINE loci (ab initio predictions)
  EXP=09_SINE1_downstream/$sp/expressed_SINEs_abinitio.bed

  # Output file for the SINE-to-gene flag with transcription status
  OUT=10_flanking_genes/$sp/SINE1_to_gene_all_exprflag.tsv

  # Extract the SINE loci and prepare for bedtools intersection
  awk -F'\t' 'BEGIN{OFS="\t"}{ split($1,a,":|-"); print a[1],a[2],a[3],$1,$2 }' "$MAP" > /tmp/SINE1_all.bed

  # Use bedtools to find intersection with expression data (ab initio transcribed SINEs)
  bedtools intersect -c -a /tmp/SINE1_all.bed -b "$EXP" > /tmp/SINE1_cnt.bed

  # Flag each SINE for transcription (yes/no) based on intersection count
  awk 'BEGIN{OFS="\t"; print "sine_locus","gene_id","sine_transcribed"} 
       { trans=($5>0?"yes":"no"); print $4,$6,trans }' /tmp/SINE1_cnt.bed > "$OUT"

  # Output the number of loci flagged for transcription
  echo "[$sp] 13C: flagged $(wc -l < "$OUT") loci (incl. header)"
done

#!/usr/bin/env bash
set -euo pipefail

# Change to the project directory
cd ~/Edispar_SINE_project_2

# Output file for full orthologue summary
OUT_full=10_flanking_genes/orthologue_SINE_expr_summary_full.tsv
echo -e "Histo_gene\tDispar_gene\tHisto_SINE_expr\tDispar_SINE_expr\tHisto_gene_expr_full\tDispar_gene_expr_full" \
  > "$OUT_full"

# Path to the reciprocal best hits file (RBH)
RBH=/tmp/rbh_fixed.tsv

# Iterate through the RBH file to build the summary
while read -r H D; do
  # Get SINE expression status for Histolytica gene
  Hs=$(awk -v g="$H" '$1==g{print $3; exit}' 10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag.tsv 2>/dev/null || echo no)
  
  # Get SINE expression status for Dispar gene
  Ds=$(awk -v g="$D" '$1==g{print $3; exit}' 10_flanking_genes/dispar/SINE1_to_gene_all_exprflag.tsv    2>/dev/null || echo no)

  # Get gene expression status for Histolytica gene (from the full gene expression data)
  Hg=$(awk -v g="$H" '$1==g{print $3; exit}' 10_flanking_genes/histolytica/gene_expression_counts.tsv 2>/dev/null || echo no)
  
  # Get gene expression status for Dispar gene (from the full gene expression data)
  Dg=$(awk -v g="$D" '$1==g{print $3; exit}' 10_flanking_genes/dispar/gene_expression_counts.tsv    2>/dev/null || echo no)

  # Append to the output file with full details
  echo -e "${H}\t${D}\t${Hs}\t${Ds}\t${Hg}\t${Dg}" >> "$OUT_full"
done < "$RBH"

echo "13D: scaffolded orthologue summary → $OUT_full"

#!/usr/bin/env bash
set -euo pipefail

# Change to the project directory
cd ~/Edispar_SINE_project_2

# Define output file for full summary
OUT_full=10_flanking_genes/orthologue_SINE_expr_summary_full.tsv

# Print header to output file
echo -e "Histo_gene\tDispar_gene\tHisto_SINE_expr\tDispar_SINE_expr\tHisto_gene_expr_full\tDispar_gene_expr_full" > "$OUT_full"

# Path to the cleaned Reciprocal Best Hits (RBH) file
RBH=/tmp/rbh_fixed.tsv

# Iterate through the cleaned RBH file to build the summary
while read -r H D; do
  # Get SINE expression status for Histolytica gene (from cleaned SINE expression file)
  Hs=$(awk -v g="$H" '$1==g{print $3; exit}' 10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag.tsv 2>/dev/null || echo no)
  
  # Get SINE expression status for Dispar gene (from cleaned SINE expression file)
  Ds=$(awk -v g="$D" '$1==g{print $3; exit}' 10_flanking_genes/dispar/SINE1_to_gene_all_exprflag.tsv 2>/dev/null || echo no)

  # Get gene expression status for Histolytica gene (from cleaned gene expression data)
  Hg=$(awk -v g="$H" '$1==g{print $3; exit}' 10_flanking_genes/histolytica/gene_expression_counts_cleaned.tsv 2>/dev/null || echo no)
  
  # Get gene expression status for Dispar gene (from cleaned gene expression data)
  Dg=$(awk -v g="$D" '$1==g{print $3; exit}' 10_flanking_genes/dispar/gene_expression_counts_cleaned.tsv 2>/dev/null || echo no)

  # Append to the output file with full details
  echo -e "$H\t$D\t$Hs\t$Ds\t$Hg\t$Dg" >> "$OUT_full"
done < "$RBH"

# Final confirmation message
echo "13D: Scaffolded orthologue summary → $OUT_full"

# Check the output file
ls -lh "$OUT_full"
wc -l "$OUT_full"
head -n 20 "$OUT_full"

#!/usr/bin/env bash

# ──────────────────────────────────────────────────────────────────────
# E1: Clean expression tables and apply mean expression cutoff (≥ 3 TPM)
# ──────────────────────────────────────────────────────────────────────

ROOT=~/Edispar_SINE_project_2
THR_MEAN=3

echo "► Cleaning gene expression tables..."
for sp in histolytica dispar; do
  in="${ROOT}/10_flanking_genes/${sp}/gene_expression_counts.tsv"
  out="${ROOT}/10_flanking_genes/${sp}/gene_expression_counts_cleaned.tsv"

  awk 'BEGIN{OFS="\t"}
       NR==1 {print; next}
       {
         sub(/^gene:/, "", $1)
         print
       }' "$in" > "$out"

  echo "[$sp] cleaned → $(wc -l < "$out") lines"
done

echo
echo "► Filtering for mean expression ≥ $THR_MEAN..."
for sp in histolytica dispar; do
  CNT="${ROOT}/10_flanking_genes/${sp}/gene_expression_counts_cleaned.tsv"
  OUT="${ROOT}/10_flanking_genes/${sp}/expressed_genes_T3.txt"

  awk -v T="$THR_MEAN" '
    NR == 1 {next}
    {
      sum = 0
      for (i = 2; i <= NF; i++) sum += $i
      if ((NF - 1) > 0 && (sum / (NF - 1)) >= T)
        print $1
    }
  ' "$CNT" | sort -u > "$OUT"

  echo "[$sp] genes mean≥$THR_MEAN: $(wc -l < "$OUT")"
done

#!/usr/bin/env bash

# ─────────────────────────────────────────────────────────────
# E2: Annotate RBH gene pairs with SINE transcription and T3
# ─────────────────────────────────────────────────────────────

ROOT=~/Edispar_SINE_project_2
RBH=/tmp/rbh_fixed.tsv
OUT_T3=$ROOT/10_flanking_genes/orthologue_SINE_expr_summary_T3.tsv

# Clean RBH gene IDs
CLEANED_RBH=/tmp/rbh_cleaned_for_T3.tsv
awk '{
  gsub(/A$/, "", $1);                            # Remove trailing A
  gsub(/^transcript:rna_/, "", $2);              # Remove transcript:rna_
  gsub(/-1$/, "", $2);                           # Remove -1 suffix
  print $2 "\t" $1
}' "$RBH" > "$CLEANED_RBH"

# Write header
echo -e "Histo_gene\tDispar_gene\tHisto_SINE_expr\tDispar_SINE_expr\tHisto_gene_expr_T3\tDispar_gene_expr_T3" > "$OUT_T3"

# Loop through each cleaned RBH pair
while read -r H D; do
  # SINE expression flags
  Hs=$(awk -v g="$H" '$1==g{print $3; exit}' "$ROOT/10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag.tsv" || echo NA)
  Ds=$(awk -v g="$D" '$1==g{print $3; exit}' "$ROOT/10_flanking_genes/dispar/SINE1_to_gene_all_exprflag.tsv" || echo NA)

  # Expression mean≥3 flag
  Hg3=$(grep -Fxq "$H" "$ROOT/10_flanking_genes/histolytica/expressed_genes_T3.txt" && echo yes || echo no)
  Dg3=$(grep -Fxq "$D" "$ROOT/10_flanking_genes/dispar/expressed_genes_T3.txt"    && echo yes || echo no)

  echo -e "$H\t$D\t$Hs\t$Ds\t$Hg3\t$Dg3" >> "$OUT_T3"
done < "$CLEANED_RBH"

# Summary checks
echo
echo "► Summary (E2 output): $OUT_T3"
wc -l "$OUT_T3"                          # Should be 5003
cut -f5 "$OUT_T3" | sort | uniq -c      # Histo expression yes/no counts
cut -f6 "$OUT_T3" | sort | uniq -c      # Dispar expression yes/no counts

echo -n "Asym (mean≥3) histo_yes_dispar_no: "
awk -F'\t' 'NR>1 && $5=="yes" && $6=="no"{c++} END{print c+0}' "$OUT_T3"

echo -n "Asym (mean≥3) dispar_yes_histo_no: "
awk -F'\t' 'NR>1 && $5=="no"  && $6=="yes"{c++} END{print c+0}'

#!/usr/bin/env bash

#!/usr/bin/env bash

# ───────────────────────────────────────────────
# Step F: Prepare gene BEDs, find closest genes, and bin by expression
# ───────────────────────────────────────────────

BASEDIR=~/Edispar_SINE_project_2

# ───────────────────────────
# BED Preparation
# ───────────────────────────

# Extract gene entries from GFF to BED (histolytica)
awk -F'\t' '$3 == "gene" {
  match($9, /ID=gene:([^;]+)/, arr)
  print $1, $4-1, $5, arr[1], ".", $7
}' OFS="\t" 00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.cleaned.sorted.gff3 \
> /tmp/histolytica_genes_fixed.bed

# Add .1 to contig names to match SINE BEDs (histolytica)
awk 'BEGIN{OFS="\t"} {
  $1 = $1 ".1"
  print
}' /tmp/histolytica_genes_fixed.bed > /tmp/histolytica_genes_fixed_dot1.bed

# Extract protein_coding_gene entries to BED (dispar)
awk -F'\t' '$3 == "protein_coding_gene" {
  match($9, /ID=([^;]+)/, arr)
  print $1, $4-1, $5, arr[1], ".", $7
}' OFS="\t" 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.cleaned.sorted.gff \
> /tmp/dispar_genes_fixed.bed

# Add .1 to contig names to match SINE BEDs (dispar)
awk 'BEGIN{OFS="\t"} {
  $1 = $1 ".1"
  print
}' /tmp/dispar_genes_fixed.bed > /tmp/dispar_genes_fixed_dot1.bed

# ───────────────────────────
# Step F1: Find closest genes
# ───────────────────────────

# Set paths to corrected SINE and GENE BEDs
declare -A SINE_BEDS=(
  [histolytica]="/tmp/histolytica_sine_coords.bed"
  [dispar]="/tmp/dispar_sine_coords.bed"
)

declare -A GENE_BEDS=(
  [histolytica]="/tmp/histolytica_genes_fixed_dot1.bed"
  [dispar]="/tmp/dispar_genes_fixed_dot1.bed"
)

# Create output directories
mkdir -p "$BASEDIR/10_flanking_genes"/{histolytica,dispar}
mkdir -p "$BASEDIR/10_flanking_genes/distance_bins_expanded"

echo "► Step F1: Finding closest genes..."

for sp in histolytica dispar; do
  echo "→ Processing $sp"

  SINE="${SINE_BEDS[$sp]}"
  GENE="${GENE_BEDS[$sp]}"
  OUT="$BASEDIR/10_flanking_genes/${sp}/SINE1_to_gene_all_dist.tsv"

  bedtools closest -D a -t first -k 1 -a "$SINE" -b "$GENE" > /tmp/${sp}_closest_raw.tsv

  awk 'BEGIN {OFS="\t"; print "sine_locus", "gene_id", "distance", "direction"}
       {
         locus = $1 ":" $2 "-" $3
         gene  = $8
         dist  = $13
         dir   = (dist < 0) ? "upstream" : "downstream"
         print locus, gene, (dist < 0 ? -dist : dist), dir
       }' /tmp/${sp}_closest_raw.tsv > "$OUT"

  echo "   [$sp] → Closest gene file written: $OUT"
done

# ───────────────────────────
# Step F2: Bin by distance and expression
# ───────────────────────────
echo "► Step F2: Binning by distance and expression..."

for sp in histolytica dispar; do
  echo "→ Processing $sp"

  DIST="$BASEDIR/10_flanking_genes/${sp}/SINE1_to_gene_all_dist.tsv"
  EXPR="$BASEDIR/10_flanking_genes/${sp}/SINE1_to_gene_all_exprflag.tsv"
  OUT="$BASEDIR/10_flanking_genes/distance_bins_expanded/${sp}_binned_summary.tsv"

  awk -v BW=1000 -v MAX=10000 'NR==FNR && FNR > 1 {expr[$1] = $3; next}
       FNR > 1 {
         dist = $3
         dir  = $4
         flag = ($1 in expr ? expr[$1] : "no")

         if (dist <= MAX) {
           bin = int(dist / BW) * BW
           key = bin "\t" (bin+BW) "\t" dir
           total[key]++
           if (flag == "yes") expressed[key]++
         }
       }
       END {
         print "bin_lower", "bin_upper", "direction", "expressed", "total"
         for (k in total) {
           print k, (expressed[k]+0), total[k]
         }
       }' "$EXPR" "$DIST" > "$OUT"

  echo "   [$sp] → Binned summary written: $OUT"
done

#!/usr/bin/env bash

# ─────────────────────────────────────────────────────────────
# STEP G: SINE proximity to asymmetrically expressed genes
# G1: Clean SINE→gene distances
# G2: Filter to expression-asymmetric gene lists
# G3: Check for SINEs within ±2kb of those genes
# ─────────────────────────────────────────────────────────────

BASEDIR=~/Edispar_SINE_project_2

# ──────────────────────────────
# G1: Clean SINE→gene distances
# ──────────────────────────────

# Clean gene IDs (strip "gene:" if present)
awk 'BEGIN{OFS="\t"} {sub(/^gene:/, "", $4); print}' /tmp/histolytica_genes_fixed_dot1.bed > /tmp/histolytica_genes_clean.bed
awk 'BEGIN{OFS="\t"} {sub(/^gene:/, "", $4); print}' /tmp/dispar_genes_fixed_dot1.bed > /tmp/dispar_genes_clean.bed

for sp in histolytica dispar; do
  echo "→ Processing $sp"
  SINE="08_SINE1_union/$sp/SINE1_union.bed"
  GENE="/tmp/${sp}_genes_clean.bed"
  OUT="$BASEDIR/10_flanking_genes/${sp}/SINE1_to_gene_all_dist_clean.tsv"

  sort -k1,1 -k2,2n "$SINE" \
    | bedtools closest -a - -b "$GENE" -D a \
    | awk 'BEGIN{OFS="\t"} {
        locus = $1 ":" $2 "-" $3
        gene  = $8
        if (gene == ".") next
        dist = $NF
        print locus, gene, dist
      }' > "$OUT"

  echo "   [$sp] → Cleaned distance file written: $OUT"
done

# ─────────────────────────────────────────────
# G2: Filter to asymmetrically expressed genes
# ─────────────────────────────────────────────

# Histolytica-specific
grep -Ff histo_expr_yes_dispar_no.txt \
  "$BASEDIR/10_flanking_genes/histolytica/SINE1_to_gene_all_dist_clean.tsv" \
  > histo_asym_SINE_distances.tsv
echo "→ histo_asym_SINE_distances.tsv: $(wc -l < histo_asym_SINE_distances.tsv) lines"

# Dispar-specific
grep -Ff dispar_expr_yes_histo_no.txt \
  "$BASEDIR/10_flanking_genes/dispar/SINE1_to_gene_all_dist_clean.tsv" \
  > dispar_asym_SINE_distances.tsv
echo "→ dispar_asym_SINE_distances.tsv: $(wc -l < dispar_asym_SINE_distances.tsv) lines"

# ─────────────────────────────────────────────
# G3: Windowed intersect ±2 kb to find nearby SINEs
# ─────────────────────────────────────────────

# HISTOLYTICA
grep -Ff histo_expr_yes_dispar_no.txt /tmp/histolytica_genes_fixed_dot1.bed \
  > tmp_histo_expr_genes.bed

awk 'BEGIN{OFS="\t"}{ s=$2-2000; if(s<0)s=0; e=$3+2000; print $1,s,e,$4 }' \
  tmp_histo_expr_genes.bed > tmp_histo_expr_genes_2kb.bed

bedtools intersect -u \
  -a tmp_histo_expr_genes_2kb.bed \
  -b 08_SINE1_union/histolytica/SINE1_union.bed \
  > histo_2kb_SINE_hits.bed

echo "→ histo_2kb_SINE_hits.bed: $(wc -l < histo_2kb_SINE_hits.bed) of $(wc -l < histo_expr_yes_dispar_no.txt) genes have a SINE within ±2 kb"

# DISPAR
grep -Ff dispar_expr_yes_histo_no.txt /tmp/dispar_genes_fixed_dot1.bed \
  > tmp_dispar_expr_genes.bed

awk 'BEGIN{OFS="\t"}{ s=$2-2000; if(s<0)s=0; e=$3+2000; print $1,s,e,$4 }' \
  tmp_dispar_expr_genes.bed > tmp_dispar_expr_genes_2kb.bed

bedtools intersect -u \
  -a tmp_dispar_expr_genes_2kb.bed \
  -b 08_SINE1_union/dispar/SINE1_union.bed \
  > dispar_2kb_SINE_hits.bed

echo "→ dispar_2kb_SINE_hits.bed: $(wc -l < dispar_2kb_SINE_hits.bed) of $(wc -l < dispar_expr_yes_histo_no.txt) genes have a SINE within ±2 kb"

# Cleanup
rm tmp_*_expr_genes*.bed

# ─────────────────────────────────────────────
# Final candidate + background gene sets
# ─────────────────────────────────────────────

cut -f4 dispar_2kb_SINE_hits.bed | sort -u > dispar_SINE4_genes.txt
echo "→ dispar_SINE4_genes.txt: $(wc -l < dispar_SINE4_genes.txt) genes"

grep -P "\tprotein_coding_gene\t" 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.cleaned.sorted.gff \
  | sed -E 's/.*ID=([^;]+);.*/\1/' \
  | sort -u > all_dispar_genes.txt
echo "→ all_dispar_genes.txt: $(wc -l < all_dispar_genes.txt) genes"
