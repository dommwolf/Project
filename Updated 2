#!/usr/bin/env bash
set -euo pipefail

# Step 1: Adjust Negative Start Positions (Ensure start positions are non-negative)

# For Histolytica - Fix negative start positions
awk 'BEGIN{OFS="\t"}{
  if ($2 < 0) $2 = 0;  # Ensure start position is non-negative
  print $1, $2, $3, $4, $5, $6
}' /tmp/histolytica_sine_coords.bed > /tmp/histolytica_sine_coords_0based_corrected.bed

# For Dispar - Fix negative start positions
awk 'BEGIN{OFS="\t"}{
  if ($2 < 0) $2 = 0;  # Ensure start position is non-negative
  print $1, $2, $3, $4, $5, $6
}' /tmp/dispar_sine_coords.bed > /tmp/dispar_sine_coords_0based_corrected.bed

# Step 2: Remove `.1` Suffix from Chromosome Names (Optional, if necessary)

# For Histolytica - Remove `.1` from chromosome names
awk 'BEGIN{OFS="\t"} {sub(/\.[0-9]+$/, "", $1); print $0}' /tmp/histolytica_sine_coords_0based_corrected.bed > /tmp/histolytica_sine_coords_0based_fixed.bed

# For Dispar - Remove `.1` from chromosome names
awk 'BEGIN{OFS="\t"} {sub(/\.[0-9]+$/, "", $1); print $0}' /tmp/dispar_sine_coords_0based_corrected.bed > /tmp/dispar_sine_coords_0based_fixed.bed

# Step 3: Perform bedtools Intersection

# For Histolytica - Run the intersection with the cleaned and fixed files
bedtools intersect -a /tmp/histolytica_sine_coords_0based_fixed.bed -b 00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.cleaned.sorted.gff3 -wa -wb > /tmp/histolytica_intersect_corrected.bed

# For Dispar - Run the intersection with the cleaned and fixed files
bedtools intersect -a /tmp/dispar_sine_coords_0based_fixed.bed -b 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.cleaned.sorted.gff -wa -wb > /tmp/dispar_intersect_corrected.bed

# Step 4: Verify Results

# For Histolytica - Check the number of intersections
wc -l /tmp/histolytica_intersect_corrected.bed
head -n 10 /tmp/histolytica_intersect_corrected.bed

# For Dispar - Check the number of intersections
wc -l /tmp/dispar_intersect_corrected.bed
head -n 10 /tmp/dispar_intersect_corrected.bed

# Clean histolytica proteins file
awk '/^>/ {print $0} !/^>/ {gsub(/[^A-Za-z]/, ""); print}' 00_inputs/histolytica/histo_proteins.faa > 00_inputs/histolytica/histo_proteins_cleaned_test.faa
wc -l 00_inputs/histolytica/histo_proteins_cleaned_test.faa

# Clean dispar proteins file
awk '/^>/ {print $0} !/^>/ {gsub(/[^A-Za-z]/, ""); print}' 00_inputs/dispar/dispar_proteins.faa > 00_inputs/dispar/dispar_proteins_cleaned_test.faa
wc -l 00_inputs/dispar/dispar_proteins_cleaned_test.faa


# Step 0.2: Building full-proteome BLAST DBs
echo "► Step 0.2: Building full-proteome BLAST DBs…"
module purge
module load blast
mkdir -p 10_flanking_genes/{histolytica,dispar}/blastdb

# Build BLAST DB for Histolytica, if not already built
if [[ ! -f 10_flanking_genes/histolytica/blastdb/histo_full_db.nhr ]]; then
  makeblastdb \
    -in 00_inputs/histolytica/histo_proteins.faa \
    -dbtype prot -parse_seqids \
    -out 10_flanking_genes/histolytica/blastdb/histo_full_db \
    -logfile 10_flanking_genes/histolytica/blastdb/histo_makeblastdb.log
  echo "   Histolytica BLAST DB created."
else
  echo "   Histolytica BLAST DB already exists, skipping creation."
fi

# Build BLAST DB for Dispar, if not already built
if [[ ! -f 10_flanking_genes/dispar/blastdb/dispar_full_db.nhr ]]; then
  makeblastdb \
    -in 00_inputs/dispar/dispar_proteins.faa \
    -dbtype prot -parse_seqids \
    -out 10_flanking_genes/dispar/blastdb/dispar_full_db \
    -logfile 10_flanking_genes/dispar/blastdb/dispar_makeblastdb.log
  echo "   Dispar BLAST DB created."
else
  echo "   Dispar BLAST DB already exists, skipping creation."
fi

echo "   → Databases built in 10_flanking_genes/*/blastdb/"

BP=10_flanking_genes/blastp
mkdir -p "$BP"

# Histolytica vs Dispar
[[ -s $BP/h2d_full.tsv ]] || blastp \
    -query 00_inputs/histolytica/histo_proteins.faa \
    -db 10_flanking_genes/dispar/blastdb/dispar_full_db \
    -out $BP/h2d_full.tsv \
    -outfmt "6 qseqid sseqid bitscore evalue" \
    -max_target_seqs 1 -max_hsps 1 -num_threads 4

# Dispar vs Histolytica
[[ -s $BP/d2h_full.tsv ]] || blastp \
    -query 00_inputs/dispar/dispar_proteins.faa \
    -db 10_flanking_genes/histolytica/blastdb/histo_full_db \
    -out $BP/d2h_full.tsv \
    -outfmt "6 qseqid sseqid bitscore evalue" \
    -max_target_seqs 1 -max_hsps 1 -num_threads 4

# Sort and select the top hit per query from both BLASTP files

# For h2d_full.tsv (histolytica to dispar)
sort -k1,1 -k3,3nr 10_flanking_genes/blastp/h2d_full.tsv | awk '!seen[$1]++' > /tmp/h2d.best

# For d2h_full.tsv (dispar to histolytica)
sort -k1,1 -k3,3nr 10_flanking_genes/blastp/d2h_full.tsv | awk '!seen[$1]++' > /tmp/d2h.best

# You can now inspect the result in /tmp/h2d.best and /tmp/d2h.best

awk 'NR==FNR{m[$1]=$2;next} m[$2]==$1{print $1,$2}' /tmp/h2d.best /tmp/d2h.best > 10_flanking_genes/blastp/reciprocal_best_hits_full.tsv


# Here’s the correct code for step 8 that creates the combined gene list in BED format:

# Process histolytica gene entries and dispar protein-coding gene entries
awk 'BEGIN{OFS="\t"} 
  # Process histolytica gene entries
  $3 == "gene" { 
    print $1, $4-1, $5, $9
  } 
  # Process dispar protein-coding gene entries
  $3 == "protein_coding_gene" { 
    print $1, $4-1, $5, $9 
  }' 00_inputs/histolytica/histo_genes_only.gff3 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.fixed2.gff.sorted.gff3 \
| sed -E 's/ID=([^;]+);.*/\1/' \
| sort -k1,1 -k2,2n > 10_flanking_genes/combined_genes.bed


# After running the makeblastdb commands, you can view the logs:
cat 10_flanking_genes/histolytica/blastdb/histo_makeblastdb.log
cat 10_flanking_genes/dispar/blastdb/dispar_makeblastdb.log

#!/bin/bash
# Load bedtools
module load bedtools/2.31.1

# Loop through Histolytica and Dispar species
for sp in histolytica dispar; do
  echo "=== Flagging transcription for $sp ==="
  
  # Define input files
  MAP=10_flanking_genes/$sp/SINE1_to_gene_all.tsv
  EXP=09_SINE1_downstream/$sp/expressed_SINEs_abinitio.bed
  OUT=10_flanking_genes/$sp/SINE1_to_gene_all_exprflag.tsv

  # Format the mapping file (split the locus into chr, start, and end)
  awk -F'\t' 'BEGIN{OFS="\t"}{
    split($1,a,":|-"); 
    print a[1],a[2],a[3],$1,$2 
  }' "$MAP" > /tmp/SINE1_all.bed

  # Count the intersection with expressed SINEs (whether the SINE is expressed or not)
  bedtools intersect -c -a /tmp/SINE1_all.bed -b "$EXP" > /tmp/SINE1_cnt.bed

  # Flag transcribed or not based on overlap (if the count > 0, it's transcribed)
  awk 'BEGIN{OFS="\t"; print "sine_locus","gene_id","sine_transcribed"} 
       { trans=($5>0?"yes":"no"); print $4,$6,trans }' /tmp/SINE1_cnt.bed > "$OUT"

  # Output the result
  echo "[$sp] 13C: flagged $(wc -l < "$OUT") loci (incl. header)"
done

#!/usr/bin/env bash
set -euo pipefail

# Change to the project directory
cd ~/Edispar_SINE_project_2

# Load the required module
module load bedtools/2.31.1

# ───────────────────────────────────────────────────────────
# 13C) Flag each union SINE for transcription (yes/no)
# ───────────────────────────────────────────────────────────
for sp in histolytica dispar; do
  # Map SINE loci to genes (already done in Step 13B, we're using the result from here)
  MAP=10_flanking_genes/$sp/SINE1_to_gene_all.tsv

  # Expression file for SINE loci (ab initio predictions)
  EXP=09_SINE1_downstream/$sp/expressed_SINEs_abinitio.bed

  # Output file for the SINE-to-gene flag with transcription status
  OUT=10_flanking_genes/$sp/SINE1_to_gene_all_exprflag.tsv

  # Extract the SINE loci and prepare for bedtools intersection
  awk -F'\t' 'BEGIN{OFS="\t"}{ split($1,a,":|-"); print a[1],a[2],a[3],$1,$2 }' "$MAP" > /tmp/SINE1_all.bed

  # Use bedtools to find intersection with expression data (ab initio transcribed SINEs)
  bedtools intersect -c -a /tmp/SINE1_all.bed -b "$EXP" > /tmp/SINE1_cnt.bed

  # Flag each SINE for transcription (yes/no) based on intersection count
  awk 'BEGIN{OFS="\t"; print "sine_locus","gene_id","sine_transcribed"} 
       { trans=($5>0?"yes":"no"); print $4,$6,trans }' /tmp/SINE1_cnt.bed > "$OUT"

  # Output the number of loci flagged for transcription
  echo "[$sp] 13C: flagged $(wc -l < "$OUT") loci (incl. header)"
done

#!/usr/bin/env bash
set -euo pipefail

# Change to the project directory
cd ~/Edispar_SINE_project_2

# Output file for full orthologue summary
OUT_full=10_flanking_genes/orthologue_SINE_expr_summary_full.tsv
echo -e "Histo_gene\tDispar_gene\tHisto_SINE_expr\tDispar_SINE_expr\tHisto_gene_expr_full\tDispar_gene_expr_full" \
  > "$OUT_full"

# Path to the reciprocal best hits file (RBH)
RBH=/tmp/rbh_fixed.tsv

# Iterate through the RBH file to build the summary
while read -r H D; do
  # Get SINE expression status for Histolytica gene
  Hs=$(awk -v g="$H" '$1==g{print $3; exit}' 10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag.tsv 2>/dev/null || echo no)
  
  # Get SINE expression status for Dispar gene
  Ds=$(awk -v g="$D" '$1==g{print $3; exit}' 10_flanking_genes/dispar/SINE1_to_gene_all_exprflag.tsv    2>/dev/null || echo no)

  # Get gene expression status for Histolytica gene (from the full gene expression data)
  Hg=$(awk -v g="$H" '$1==g{print $3; exit}' 10_flanking_genes/histolytica/gene_expression_counts.tsv 2>/dev/null || echo no)
  
  # Get gene expression status for Dispar gene (from the full gene expression data)
  Dg=$(awk -v g="$D" '$1==g{print $3; exit}' 10_flanking_genes/dispar/gene_expression_counts.tsv    2>/dev/null || echo no)

  # Append to the output file with full details
  echo -e "${H}\t${D}\t${Hs}\t${Ds}\t${Hg}\t${Dg}" >> "$OUT_full"
done < "$RBH"

echo "13D: scaffolded orthologue summary → $OUT_full"

#!/usr/bin/env bash
set -euo pipefail

# Change to the project directory
cd ~/Edispar_SINE_project_2

# Define output file for full summary
OUT_full=10_flanking_genes/orthologue_SINE_expr_summary_full.tsv

# Print header to output file
echo -e "Histo_gene\tDispar_gene\tHisto_SINE_expr\tDispar_SINE_expr\tHisto_gene_expr_full\tDispar_gene_expr_full" > "$OUT_full"

# Path to the cleaned Reciprocal Best Hits (RBH) file
RBH=/tmp/rbh_fixed.tsv

# Iterate through the cleaned RBH file to build the summary
while read -r H D; do
  # Get SINE expression status for Histolytica gene (from cleaned SINE expression file)
  Hs=$(awk -v g="$H" '$1==g{print $3; exit}' 10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag.tsv 2>/dev/null || echo no)
  
  # Get SINE expression status for Dispar gene (from cleaned SINE expression file)
  Ds=$(awk -v g="$D" '$1==g{print $3; exit}' 10_flanking_genes/dispar/SINE1_to_gene_all_exprflag.tsv 2>/dev/null || echo no)

  # Get gene expression status for Histolytica gene (from cleaned gene expression data)
  Hg=$(awk -v g="$H" '$1==g{print $3; exit}' 10_flanking_genes/histolytica/gene_expression_counts_cleaned.tsv 2>/dev/null || echo no)
  
  # Get gene expression status for Dispar gene (from cleaned gene expression data)
  Dg=$(awk -v g="$D" '$1==g{print $3; exit}' 10_flanking_genes/dispar/gene_expression_counts_cleaned.tsv 2>/dev/null || echo no)

  # Append to the output file with full details
  echo -e "$H\t$D\t$Hs\t$Ds\t$Hg\t$Dg" >> "$OUT_full"
done < "$RBH"

# Final confirmation message
echo "13D: Scaffolded orthologue summary → $OUT_full"

# Check the output file
ls -lh "$OUT_full"
wc -l "$OUT_full"
head -n 20 "$OUT_full"

#!/usr/bin/env bash

# ──────────────────────────────────────────────────────────────────────
# E1: Clean expression tables and apply mean expression cutoff (≥ 3 TPM)
# ──────────────────────────────────────────────────────────────────────

ROOT=~/Edispar_SINE_project_2
THR_MEAN=3

echo "► Cleaning gene expression tables..."
for sp in histolytica dispar; do
  in="${ROOT}/10_flanking_genes/${sp}/gene_expression_counts.tsv"
  out="${ROOT}/10_flanking_genes/${sp}/gene_expression_counts_cleaned.tsv"

  awk 'BEGIN{OFS="\t"}
       NR==1 {print; next}
       {
         sub(/^gene:/, "", $1)
         print
       }' "$in" > "$out"

  echo "[$sp] cleaned → $(wc -l < "$out") lines"
done

echo
echo "► Filtering for mean expression ≥ $THR_MEAN..."
for sp in histolytica dispar; do
  CNT="${ROOT}/10_flanking_genes/${sp}/gene_expression_counts_cleaned.tsv"
  OUT="${ROOT}/10_flanking_genes/${sp}/expressed_genes_T3.txt"

  awk -v T="$THR_MEAN" '
    NR == 1 {next}
    {
      sum = 0
      for (i = 2; i <= NF; i++) sum += $i
      if ((NF - 1) > 0 && (sum / (NF - 1)) >= T)
        print $1
    }
  ' "$CNT" | sort -u > "$OUT"

  echo "[$sp] genes mean≥$THR_MEAN: $(wc -l < "$OUT")"
done

#!/usr/bin/env bash

# ─────────────────────────────────────────────────────────────
# E2: Annotate RBH gene pairs with SINE transcription and T3
# ─────────────────────────────────────────────────────────────

ROOT=~/Edispar_SINE_project_2
RBH=/tmp/rbh_fixed.tsv
OUT_T3=$ROOT/10_flanking_genes/orthologue_SINE_expr_summary_T3.tsv

# Clean RBH gene IDs
CLEANED_RBH=/tmp/rbh_cleaned_for_T3.tsv
awk '{
  gsub(/A$/, "", $1);                            # Remove trailing A
  gsub(/^transcript:rna_/, "", $2);              # Remove transcript:rna_
  gsub(/-1$/, "", $2);                           # Remove -1 suffix
  print $2 "\t" $1
}' "$RBH" > "$CLEANED_RBH"

# Write header
echo -e "Histo_gene\tDispar_gene\tHisto_SINE_expr\tDispar_SINE_expr\tHisto_gene_expr_T3\tDispar_gene_expr_T3" > "$OUT_T3"

# Loop through each cleaned RBH pair
while read -r H D; do
  # SINE expression flags
  Hs=$(awk -v g="$H" '$1==g{print $3; exit}' "$ROOT/10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag.tsv" || echo NA)
  Ds=$(awk -v g="$D" '$1==g{print $3; exit}' "$ROOT/10_flanking_genes/dispar/SINE1_to_gene_all_exprflag.tsv" || echo NA)

  # Expression mean≥3 flag
  Hg3=$(grep -Fxq "$H" "$ROOT/10_flanking_genes/histolytica/expressed_genes_T3.txt" && echo yes || echo no)
  Dg3=$(grep -Fxq "$D" "$ROOT/10_flanking_genes/dispar/expressed_genes_T3.txt"    && echo yes || echo no)

  echo -e "$H\t$D\t$Hs\t$Ds\t$Hg3\t$Dg3" >> "$OUT_T3"
done < "$CLEANED_RBH"

# Summary checks
echo
echo "► Summary (E2 output): $OUT_T3"
wc -l "$OUT_T3"                          # Should be 5003
cut -f5 "$OUT_T3" | sort | uniq -c      # Histo expression yes/no counts
cut -f6 "$OUT_T3" | sort | uniq -c      # Dispar expression yes/no counts

echo -n "Asym (mean≥3) histo_yes_dispar_no: "
awk -F'\t' 'NR>1 && $5=="yes" && $6=="no"{c++} END{print c+0}' "$OUT_T3"

echo -n "Asym (mean≥3) dispar_yes_histo_no: "
awk -F'\t' 'NR>1 && $5=="no"  && $6=="yes"{c++} END{print c+0}'

#!/usr/bin/env bash

#!/usr/bin/env bash

# ───────────────────────────────────────────────
# Step F: Prepare gene BEDs, find closest genes, and bin by expression
# ───────────────────────────────────────────────

BASEDIR=~/Edispar_SINE_project_2

# ───────────────────────────
# BED Preparation
# ───────────────────────────

# Extract gene entries from GFF to BED (histolytica)
awk -F'\t' '$3 == "gene" {
  match($9, /ID=gene:([^;]+)/, arr)
  print $1, $4-1, $5, arr[1], ".", $7
}' OFS="\t" 00_inputs/histolytica/Entamoeba_histolytica.JCVI-ESG2-1.0.60.cleaned.sorted.gff3 \
> /tmp/histolytica_genes_fixed.bed

# Add .1 to contig names to match SINE BEDs (histolytica)
awk 'BEGIN{OFS="\t"} {
  $1 = $1 ".1"
  print
}' /tmp/histolytica_genes_fixed.bed > /tmp/histolytica_genes_fixed_dot1.bed

# Extract protein_coding_gene entries to BED (dispar)
awk -F'\t' '$3 == "protein_coding_gene" {
  match($9, /ID=([^;]+)/, arr)
  print $1, $4-1, $5, arr[1], ".", $7
}' OFS="\t" 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.cleaned.sorted.gff \
> /tmp/dispar_genes_fixed.bed

# Add .1 to contig names to match SINE BEDs (dispar)
awk 'BEGIN{OFS="\t"} {
  $1 = $1 ".1"
  print
}' /tmp/dispar_genes_fixed.bed > /tmp/dispar_genes_fixed_dot1.bed

# ───────────────────────────
# Step F1: Find closest genes
# ───────────────────────────

# Set paths to corrected SINE and GENE BEDs
declare -A SINE_BEDS=(
  [histolytica]="/tmp/histolytica_sine_coords.bed"
  [dispar]="/tmp/dispar_sine_coords.bed"
)

declare -A GENE_BEDS=(
  [histolytica]="/tmp/histolytica_genes_fixed_dot1.bed"
  [dispar]="/tmp/dispar_genes_fixed_dot1.bed"
)

# Create output directories
mkdir -p "$BASEDIR/10_flanking_genes"/{histolytica,dispar}
mkdir -p "$BASEDIR/10_flanking_genes/distance_bins_expanded"

echo "► Step F1: Finding closest genes..."

for sp in histolytica dispar; do
  echo "→ Processing $sp"

  SINE="${SINE_BEDS[$sp]}"
  GENE="${GENE_BEDS[$sp]}"
  OUT="$BASEDIR/10_flanking_genes/${sp}/SINE1_to_gene_all_dist.tsv"

  bedtools closest -D a -t first -k 1 -a "$SINE" -b "$GENE" > /tmp/${sp}_closest_raw.tsv

  awk 'BEGIN {OFS="\t"; print "sine_locus", "gene_id", "distance", "direction"}
       {
         locus = $1 ":" $2 "-" $3
         gene  = $8
         dist  = $13
         dir   = (dist < 0) ? "upstream" : "downstream"
         print locus, gene, (dist < 0 ? -dist : dist), dir
       }' /tmp/${sp}_closest_raw.tsv > "$OUT"

  echo "   [$sp] → Closest gene file written: $OUT"
done

# ───────────────────────────
# Step F2: Bin by distance and expression
# ───────────────────────────
echo "► Step F2: Binning by distance and expression..."

for sp in histolytica dispar; do
  echo "→ Processing $sp"

  DIST="$BASEDIR/10_flanking_genes/${sp}/SINE1_to_gene_all_dist.tsv"
  EXPR="$BASEDIR/10_flanking_genes/${sp}/SINE1_to_gene_all_exprflag.tsv"
  OUT="$BASEDIR/10_flanking_genes/distance_bins_expanded/${sp}_binned_summary.tsv"

  awk -v BW=1000 -v MAX=10000 'NR==FNR && FNR > 1 {expr[$1] = $3; next}
       FNR > 1 {
         dist = $3
         dir  = $4
         flag = ($1 in expr ? expr[$1] : "no")

         if (dist <= MAX) {
           bin = int(dist / BW) * BW
           key = bin "\t" (bin+BW) "\t" dir
           total[key]++
           if (flag == "yes") expressed[key]++
         }
       }
       END {
         print "bin_lower", "bin_upper", "direction", "expressed", "total"
         for (k in total) {
           print k, (expressed[k]+0), total[k]
         }
       }' "$EXPR" "$DIST" > "$OUT"

  echo "   [$sp] → Binned summary written: $OUT"
done

#!/usr/bin/env bash

# ─────────────────────────────────────────────────────────────
# STEP G: SINE proximity to asymmetrically expressed genes
# G1: Clean SINE→gene distances
# G2: Filter to expression-asymmetric gene lists
# G3: Check for SINEs within ±2kb of those genes
# ─────────────────────────────────────────────────────────────

BASEDIR=~/Edispar_SINE_project_2

# ──────────────────────────────
# G1: Clean SINE→gene distances
# ──────────────────────────────

# Clean gene IDs (strip "gene:" if present)
awk 'BEGIN{OFS="\t"} {sub(/^gene:/, "", $4); print}' /tmp/histolytica_genes_fixed_dot1.bed > /tmp/histolytica_genes_clean.bed
awk 'BEGIN{OFS="\t"} {sub(/^gene:/, "", $4); print}' /tmp/dispar_genes_fixed_dot1.bed > /tmp/dispar_genes_clean.bed

for sp in histolytica dispar; do
  echo "→ Processing $sp"
  SINE="08_SINE1_union/$sp/SINE1_union.bed"
  GENE="/tmp/${sp}_genes_clean.bed"
  OUT="$BASEDIR/10_flanking_genes/${sp}/SINE1_to_gene_all_dist_clean.tsv"

  sort -k1,1 -k2,2n "$SINE" \
    | bedtools closest -a - -b "$GENE" -D a \
    | awk 'BEGIN{OFS="\t"} {
        locus = $1 ":" $2 "-" $3
        gene  = $8
        if (gene == ".") next
        dist = $NF
        print locus, gene, dist
      }' > "$OUT"

  echo "   [$sp] → Cleaned distance file written: $OUT"
done

# ─────────────────────────────────────────────
# G2: Filter to asymmetrically expressed genes
# ─────────────────────────────────────────────

# Histolytica-specific
grep -Ff histo_expr_yes_dispar_no.txt \
  "$BASEDIR/10_flanking_genes/histolytica/SINE1_to_gene_all_dist_clean.tsv" \
  > histo_asym_SINE_distances.tsv
echo "→ histo_asym_SINE_distances.tsv: $(wc -l < histo_asym_SINE_distances.tsv) lines"

# Dispar-specific
grep -Ff dispar_expr_yes_histo_no.txt \
  "$BASEDIR/10_flanking_genes/dispar/SINE1_to_gene_all_dist_clean.tsv" \
  > dispar_asym_SINE_distances.tsv
echo "→ dispar_asym_SINE_distances.tsv: $(wc -l < dispar_asym_SINE_distances.tsv) lines"

# ─────────────────────────────────────────────
# G3: Windowed intersect ±2 kb to find nearby SINEs
# ─────────────────────────────────────────────

# HISTOLYTICA
grep -Ff histo_expr_yes_dispar_no.txt /tmp/histolytica_genes_fixed_dot1.bed \
  > tmp_histo_expr_genes.bed

awk 'BEGIN{OFS="\t"}{ s=$2-2000; if(s<0)s=0; e=$3+2000; print $1,s,e,$4 }' \
  tmp_histo_expr_genes.bed > tmp_histo_expr_genes_2kb.bed

bedtools intersect -u \
  -a tmp_histo_expr_genes_2kb.bed \
  -b 08_SINE1_union/histolytica/SINE1_union.bed \
  > histo_2kb_SINE_hits.bed

echo "→ histo_2kb_SINE_hits.bed: $(wc -l < histo_2kb_SINE_hits.bed) of $(wc -l < histo_expr_yes_dispar_no.txt) genes have a SINE within ±2 kb"

# DISPAR
grep -Ff dispar_expr_yes_histo_no.txt /tmp/dispar_genes_fixed_dot1.bed \
  > tmp_dispar_expr_genes.bed

awk 'BEGIN{OFS="\t"}{ s=$2-2000; if(s<0)s=0; e=$3+2000; print $1,s,e,$4 }' \
  tmp_dispar_expr_genes.bed > tmp_dispar_expr_genes_2kb.bed

bedtools intersect -u \
  -a tmp_dispar_expr_genes_2kb.bed \
  -b 08_SINE1_union/dispar/SINE1_union.bed \
  > dispar_2kb_SINE_hits.bed

echo "→ dispar_2kb_SINE_hits.bed: $(wc -l < dispar_2kb_SINE_hits.bed) of $(wc -l < dispar_expr_yes_histo_no.txt) genes have a SINE within ±2 kb"

# Cleanup
rm tmp_*_expr_genes*.bed

# ─────────────────────────────────────────────
# Final candidate + background gene sets
# ─────────────────────────────────────────────

cut -f4 dispar_2kb_SINE_hits.bed | sort -u > dispar_SINE4_genes.txt
echo "→ dispar_SINE4_genes.txt: $(wc -l < dispar_SINE4_genes.txt) genes"

grep -P "\tprotein_coding_gene\t" 00_inputs/dispar/AmoebaDB-59_EdisparSAW760.cleaned.sorted.gff \
  | sed -E 's/.*ID=([^;]+);.*/\1/' \
  | sort -u > all_dispar_genes.txt
echo "→ all_dispar_genes.txt: $(wc -l < all_dispar_genes.txt) genes"

# ===================================================================
# 1. Catalog Size (number of union SINE loci)
# ===================================================================
echo "=== 1. Catalog Size ==="
echo "Histolytica:" $(wc -l < 08_SINE1_union/histolytica/SINE1_union.bed)
echo "Dispar:     " $(wc -l < 08_SINE1_union/dispar/SINE1_union.bed)

# ───────────────────────────────────────────────────────────────
# 2. % Expressed SINEs (with overrideable file paths)
# ───────────────────────────────────────────────────────────────

# set these to point at the expr‐flag files you actually want to use:
HISTO_FLAG="10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag.tsv"
DISPAR_FLAG="10_flanking_genes/dispar/SINE1_to_gene_all_exprflag.tsv"
# e.g. if you had a v2 version:
# HISTO_FLAG="10_flanking_genes/histo/SINE1_to_gene_all_exprflag_v2.tsv"
# DISPAR_FLAG="10_flanking_genes/dispar/SINE1_to_gene_all_exprflag_v2.tsv"

HISTO_BED="08_SINE1_union/histolytica/SINE1_union.bed"
DISPAR_BED="08_SINE1_union/dispar/SINE1_union.bed"

echo -e "\n=== 2. % Expressed SINEs ==="

# count the “yes” flags:
HISTO_EXP=$(awk 'NR>1 && $3=="yes"' "$HISTO_FLAG" | wc -l)
DISPAR_EXP=$(awk 'NR>1 && $3=="yes"' "$DISPAR_FLAG" | wc -l)
# count the total loci:
HISTO_TOT=$(wc -l < "$HISTO_BED")
DISPAR_TOT=$(wc -l < "$DISPAR_BED")

# print with percentages:
printf "Histolytica: %d / %d (%.1f%%)\n" \
       "$HISTO_EXP" "$HISTO_TOT" \
       "$(echo "scale=1; 100*$HISTO_EXP/$HISTO_TOT" | bc)"

printf "Dispar:      %d / %d (%.1f%%)\n" \
       "$DISPAR_EXP" "$DISPAR_TOT" \
       "$(echo "scale=1; 100*$DISPAR_EXP/$DISPAR_TOT" | bc)"


# ===================================================================
# 3. Proximity (<1 kb from nearest gene)
# ===================================================================
echo -e "\n=== 3. Proximity (<1 kb from gene) ==="
HISTO_NEAR=$(awk 'NR>1 && $3<1000' 10_flanking_genes/histolytica/SINE1_to_gene_all_dist.tsv | wc -l)
DISPAR_NEAR=$(awk 'NR>1 && $3<1000' 10_flanking_genes/dispar/SINE1_to_gene_all_dist.tsv | wc -l)
echo "Histolytica: $HISTO_NEAR"
echo "Dispar:      $DISPAR_NEAR"

# -------------------------------
# 4a. Count genes with SINEs mapped
# -------------------------------

# For E. dispar:
DISPAR_GENES_WITH_SINE=$(awk 'NR>1 && $2!="."' 10_flanking_genes/dispar/SINE1_to_gene_all_exprflag.tsv | cut -f2 | sort | uniq | wc -l)

# For E. histolytica:
HISTO_GENES_WITH_SINE=$(awk 'NR>1 && $2!="."' 10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag.tsv | cut -f2 | sort | uniq | wc -l)

# -------------------------------
# 4b. Count total genes (excluding header)
# -------------------------------

# For E. dispar:
DISPAR_TOTAL_GENES=$(( $(wc -l < 10_flanking_genes/dispar/gene_expression_counts_cleaned.tsv) - 1 ))

# For E. histolytica:
HISTO_TOTAL_GENES=$(( $(wc -l < 10_flanking_genes/histolytica/gene_expression_counts_cleaned.tsv) - 1 ))

# -------------------------------
# 4c. Print results and percentages
# -------------------------------

echo "E. dispar:   $DISPAR_GENES_WITH_SINE genes with SINE / $DISPAR_TOTAL_GENES total genes"
echo "E. histolytica: $HISTO_GENES_WITH_SINE genes with SINE / $HISTO_TOTAL_GENES total genes"

printf "E. dispar:   %.2f%% of genes have SINEs\n" "$(echo "$DISPAR_GENES_WITH_SINE/$DISPAR_TOTAL_GENES*100" | bc -l)"
printf "E. histolytica: %.2f%% of genes have SINEs\n" "$(echo "$HISTO_GENES_WITH_SINE/$HISTO_TOTAL_GENES*100" | bc -l)"


# ───────────────────────────────────────────────────────────────
# 5. Co-expression Rate (SINE + gene both expressed, overrideable)
# ───────────────────────────────────────────────────────────────

# point these at the versions you actually want to use:
HISTO_FLAG="10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag.tsv"
DISPAR_FLAG="10_flanking_genes/dispar/SINE1_to_gene_all_exprflag.tsv"
# e.g. if you have a v2 file:
# HISTO_FLAG="10_flanking_genes/histolytica/SINE1_to_gene_all_exprflag_v2.tsv"
# DISPAR_FLAG="10_flanking_genes/dispar/SINE1_to_gene_all_exprflag_v2.tsv"

HISTO_T3="10_flanking_genes/histolytica/expressed_genes_T3.txt"
DISPAR_T3="10_flanking_genes/dispar/expressed_genes_T3.txt"

echo -e "\n=== 5. Co-expression Rate ==="

# loop over species
for sp in histolytica dispar; do
  # pick the right files
  if [[ "$sp" == "histolytica" ]]; then
    MAP="$HISTO_FLAG"
    T3="$HISTO_T3"
  else
    MAP="$DISPAR_FLAG"
    T3="$DISPAR_T3"
  fi

  OUT="/tmp/${sp}_SINE_gene_expr_summary.tsv"

  # build a temporary summary of SINE vs gene expression
  awk 'NR>1{print $1,$2,$3}' OFS="\t" "$MAP" | \
  while IFS=$'\t' read locus gene sinetr; do
    gene_exp=no
    if [[ "$gene" != "." ]] && grep -Fxq "$gene" "$T3"; then
      gene_exp=yes
    fi
    echo -e "$locus\t$gene\t$sinetr\t$gene_exp"
  done > "$OUT"

  # count how many are “yes/yes”
  BOTH_EXP=$(awk -F'\t' '$3=="yes" && $4=="yes"' "$OUT" | wc -l)
  TOTAL=$(awk 'END{print NR-1}' "$MAP")

  printf "%s: %d / %d SINE-gene pairs co-expressed (%.1f%%)\n" \
         "$sp" "$BOTH_EXP" "$TOTAL" \
         "$(echo "scale=1; 100*$BOTH_EXP/$TOTAL" | bc)"
done

# ===================================================================
# 6. Functional Enrichment File Lists
# ===================================================================
echo -e "\n=== 6. Functional Enrichment Files ==="
echo "Foreground gene list: dispar_SINE4_genes.txt ($(wc -l < dispar_SINE4_genes.txt) genes)"
echo "Background gene list: all_dispar_genes.txt ($(wc -l < all_dispar_genes.txt) genes)"
echo "→ Ready for DAVID, gProfiler, etc."

#7
awk -F'\t' 'NR>1 && $3=="yes" && $4=="yes"{c++} END{print "Both have SINEs:", c+0}' 10_flanking_genes/orthologue_SINE_expr_summary_FIXED.tsv
awk -F'\t' 'NR>1 && $3=="yes" && $4=="no"{c++} END{print "Only histolytica has SINE:", c+0}' 10_flanking_genes/orthologue_SINE_expr_summary_FIXED.tsv
awk -F'\t' 'NR>1 && $3=="no" && $4=="yes"{c++} END{print "Only dispar has SINE:", c+0}' 10_flanking_genes/orthologue_SINE_expr_summary_FIXED.tsv
